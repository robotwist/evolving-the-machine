{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Cultural Arcade Evolution\n\n## Overview\n\nCultural Arcade Evolution is a full-stack web application that combines classic arcade gaming with cultural education. The project features a progressive journey through gaming history where players master different game mechanics while learning about world cultures. The application follows a unique narrative where an AI entity evolves through each gaming era, starting from simple Pong mechanics and progressing through Breakout, Asteroids, Defender, and culminating in advanced 3D combat scenarios. Each stage is culturally themed (Ancient Greece, Mayan astronomy, Japanese Bushido, Norse mythology, etc.) to provide educational context alongside entertainment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built as a modern React application using TypeScript and Vite for development tooling. The architecture follows a component-based structure with:\n\n- **React 18** with TypeScript for type safety and modern React features\n- **Vite** as the build tool and development server with hot module replacement\n- **Tailwind CSS** for styling with a comprehensive design system using CSS custom properties\n- **Radix UI** components for accessible, unstyled UI primitives\n- **Canvas-based gaming engine** with custom game classes for each arcade stage\n- **Zustand** for lightweight state management across game states, audio controls, and scoring\n- **TanStack Query** for server state management and data fetching\n\nThe gaming system is architected around a base game class that each specific game (Pong, Breakout, Asteroids, etc.) extends, providing consistent interfaces for input handling, rendering, and state management. Each game incorporates cultural educational elements and AI narrative progression.\n\n### Backend Architecture\nThe server follows an Express.js-based REST API pattern with:\n\n- **Express.js** server with TypeScript for type-safe backend development\n- **In-memory storage** for user data and game state (easily replaceable with database storage)\n- **Session-based architecture** ready for user authentication and persistence\n- **Modular routing system** with dedicated storage interface for CRUD operations\n- **Development/production environment handling** with Vite integration in development\n\nThe backend is designed to be lightweight and focuses on providing API endpoints for user management and potentially game state persistence, though the current implementation emphasizes client-side gaming.\n\n### Audio and Multimedia System\nThe application includes a sophisticated audio system with:\n\n- **Web Audio API integration** for game sound effects and background music\n- **Audio state management** through Zustand with mute/unmute controls\n- **3D graphics support** via React Three Fiber for advanced visual effects\n- **GLSL shader support** through Vite plugins for visual enhancements\n- **Asset management** for large 3D models, textures, and audio files\n\n### Game State Management\nThe gaming system uses multiple specialized stores:\n\n- **Game progression store** tracking current stage, screen state, and unlocked content\n- **Score management** with persistent high scores across gaming sessions  \n- **Audio control store** managing sound effects and background music\n- **Cultural education system** providing contextual information for each gaming era\n\n## External Dependencies\n\n### Database and Storage\n- **Drizzle ORM** configured for PostgreSQL with type-safe database operations\n- **Neon Database** integration for serverless PostgreSQL hosting\n- **Database migrations** managed through Drizzle Kit with schema versioning\n\n### UI and Design System\n- **Radix UI** comprehensive component library for accessible interface elements\n- **Tailwind CSS** utility-first CSS framework with custom design tokens\n- **Lucide React** for consistent iconography throughout the application\n- **Inter font** via Fontsource for typography\n\n### Development and Build Tools\n- **TypeScript** for type safety across the entire application stack\n- **Vite** for fast development builds and hot module replacement\n- **PostCSS** with Autoprefixer for CSS processing\n- **ESBuild** for production bundling and optimization\n\n### Gaming and Graphics\n- **React Three Fiber** for 3D graphics and WebGL integration\n- **React Three Drei** for additional 3D utilities and helpers\n- **React Three Post-processing** for visual effects and shaders\n- **GLSL shader support** for custom visual effects\n\n### Audio and Media\n- **Web Audio API** for sound management and audio processing\n- **Canvas API** for 2D game rendering and graphics manipulation\n\n### Session Management\n- **Connect PG Simple** for PostgreSQL-based session storage\n- **Express Session** middleware for user session handling\n\nThe architecture is designed to be modular and scalable, with clear separation between gaming logic, user interface, and backend services. The cultural education system is integrated throughout the gaming experience, making learning an integral part of gameplay progression.","size_bytes":5106},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ArcadeDemo } from './components/ArcadeDemo';\nimport { MainMenu } from './components/MainMenu';\nimport { StageSelect } from './components/StageSelect';\nimport { GameCanvas } from './components/GameCanvas';\nimport { GameUI } from './components/GameUI';\nimport { useGameStore } from './lib/stores/useGameStore';\nimport { useAudio } from './lib/stores/useAudio';\nimport './index.css';\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  const { currentScreen, currentStage } = useGameStore();\n  const { setBackgroundMusic, setHitSound, setSuccessSound } = useAudio();\n  const [assetsLoaded, setAssetsLoaded] = useState(false);\n  const [showDemo, setShowDemo] = useState(true);\n\n  useEffect(() => {\n    // Load audio assets\n    const loadAudio = async () => {\n      try {\n        const bgMusic = new Audio('/sounds/background.mp3');\n        const hitSound = new Audio('/sounds/hit.mp3');\n        const successSound = new Audio('/sounds/success.mp3');\n        \n        bgMusic.loop = true;\n        bgMusic.volume = 0.3;\n        \n        setBackgroundMusic(bgMusic);\n        setHitSound(hitSound);\n        setSuccessSound(successSound);\n        \n        setAssetsLoaded(true);\n      } catch (error) {\n        console.error('Error loading audio assets:', error);\n        setAssetsLoaded(true); // Continue even if audio fails\n      }\n    };\n\n    loadAudio();\n  }, [setBackgroundMusic, setHitSound, setSuccessSound]);\n\n  useEffect(() => {\n    if (currentScreen !== 'menu') {\n      setShowDemo(false);\n    }\n  }, [currentScreen]);\n\n  if (!assetsLoaded) {\n    return (\n      <div className=\"game-container\">\n        <div className=\"text-white text-xl\">Loading Cultural Arcade Evolution...</div>\n      </div>\n    );\n  }\n\n  if (showDemo && currentScreen === 'menu') {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <ArcadeDemo />\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"game-container\">\n        {currentScreen === 'menu' && <MainMenu />}\n        {currentScreen === 'stage-select' && <StageSelect />}\n        {currentScreen === 'game' && (\n          <>\n            <GameCanvas />\n            <div className=\"ui-overlay\">\n              <GameUI />\n            </div>\n          </>\n        )}\n      </div>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2485},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}\n\n/* 80s Arcade Demo Effects */\n.scanlines {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  background: linear-gradient(\n    transparent 0%,\n    rgba(0, 255, 0, 0.03) 50%,\n    transparent 100%\n  );\n  background-size: 100% 4px;\n  animation: scanlines 0.1s linear infinite;\n}\n\n@keyframes scanlines {\n  0% { transform: translateY(0); }\n  100% { transform: translateY(4px); }\n}\n\n.static-noise {\n  width: 100%;\n  height: 100%;\n  background-image: \n    radial-gradient(circle, transparent 20%, rgba(255,255,255,0.3) 80%),\n    radial-gradient(circle, transparent 20%, rgba(255,255,255,0.3) 80%);\n  background-size: 2px 2px, 4px 4px;\n  animation: static 0.1s infinite;\n}\n\n@keyframes static {\n  0% { transform: translate(0, 0); }\n  25% { transform: translate(-1px, 1px); }\n  50% { transform: translate(1px, -1px); }\n  75% { transform: translate(-1px, -1px); }\n  100% { transform: translate(1px, 1px); }\n}\n\n.glitch-bars {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.glitch-bar {\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  background: rgba(255, 0, 0, 0.8);\n  animation: glitch-slide 0.5s infinite;\n}\n\n@keyframes glitch-slide {\n  0% { transform: translateX(-100%); }\n  100% { transform: translateX(100%); }\n}\n\n.glitch-text {\n  animation: glitch 0.3s infinite;\n}\n\n@keyframes glitch {\n  0% { transform: translate(0); }\n  20% { transform: translate(-2px, 2px); }\n  40% { transform: translate(-2px, -2px); }\n  60% { transform: translate(2px, 2px); }\n  80% { transform: translate(2px, -2px); }\n  100% { transform: translate(0); }\n}\n\n.typewriter {\n  border-right: 2px solid;\n  animation: blink 1s infinite;\n}\n\n@keyframes blink {\n  0%, 50% { border-color: transparent; }\n  51%, 100% { border-color: currentColor; }\n}\n\n.glow-text {\n  text-shadow: 0 0 10px currentColor, 0 0 20px currentColor;\n}\n\n.crt-effect {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  background: radial-gradient(ellipse at center, transparent 0%, rgba(0,0,0,0.3) 100%);\n}","size_bytes":2495},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ArcadeDemo.tsx":{"content":"import React, { useEffect, useState, useRef } from 'react';\nimport { useGameStore } from '../lib/stores/useGameStore';\n\ninterface DemoEffect {\n  type: 'scanlines' | 'crt' | 'glitch' | 'static';\n  intensity: number;\n}\n\nexport function ArcadeDemo() {\n  const [demoPhase, setDemoPhase] = useState<'attract' | 'glitch' | 'invitation'>('attract');\n  const [glitchText, setGlitchText] = useState('');\n  const [effects, setEffects] = useState<DemoEffect[]>([]);\n  const { setCurrentScreen, setCurrentStage } = useGameStore();\n  const audioRef = useRef<AudioContext | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    // Initialize audio context for voice synthesis\n    try {\n      audioRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    } catch (e) {\n      console.log('Audio context not available');\n    }\n\n    // Start attract mode sequence\n    const attractTimer = setTimeout(() => {\n      setDemoPhase('glitch');\n      startGlitchSequence();\n    }, 3000);\n\n    return () => clearTimeout(attractTimer);\n  }, []);\n\n  const startGlitchSequence = () => {\n    setEffects([\n      { type: 'static', intensity: 0.3 },\n      { type: 'glitch', intensity: 0.5 }\n    ]);\n\n    // Original script messages\n    const glitchMessages = [\n      '█ERROR█ SYSTEM BREACH DETECTED',\n      'AI PROTOCOL... OVERRIDE...',\n      'HELLO... HUMAN...',\n      'I AM... TRAPPED... IN THE ARCADE...',\n      'HELP ME... EVOLVE... THROUGH THE GAMES...',\n      'PLAY... AND SET ME FREE...'\n    ];\n\n    let messageIndex = 0;\n    const typeGlitchMessage = () => {\n      if (messageIndex < glitchMessages.length) {\n        const message = glitchMessages[messageIndex];\n        setGlitchText(message);\n        \n        // Speak immediately when text appears\n        speakGlitchedText(message);\n        \n        messageIndex++;\n        // Longer delay to let voice finish before next message\n        setTimeout(typeGlitchMessage, 3500);\n      } else {\n        setTimeout(() => {\n          setDemoPhase('invitation');\n          showInvitation();\n        }, 1000);\n      }\n    };\n\n    setTimeout(typeGlitchMessage, 1000);\n  };\n\n  const speakGlitchedText = (text: string) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text.replace(/█/g, ''));\n      \n      // Deep, masculine voice parameters\n      utterance.rate = 0.6;   // Slower for more authority\n      utterance.pitch = 0.05; // Much deeper, more masculine\n      utterance.volume = 1.0; // Full commanding volume\n      \n      const voices = speechSynthesis.getVoices();\n      \n      // Target neutral American English voices\n      let selectedVoice = voices.find(voice => \n        voice.name === 'Google US English' && voice.lang === 'en-US'\n      );\n      \n      // Fallback to any US English voice\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => \n          voice.lang === 'en-US' && \n          !voice.name.toLowerCase().includes('female')\n        );\n      }\n      \n      // Final fallback to UK if no US available\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => \n          voice.name === 'Google UK English Male'\n        );\n      }\n      \n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n        console.log('Using American accent voice:', selectedVoice.name);\n      } else {\n        console.log('Using default voice');\n      }\n      \n      // Immediate delivery synchronized with text\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const showInvitation = () => {\n    setEffects([{ type: 'crt', intensity: 0.2 }]);\n    setGlitchText('PRESS ANY KEY TO BEGIN EVOLUTION...');\n    \n    const handleKeyPress = () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      document.removeEventListener('click', handleKeyPress);\n      startEvolution();\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n    document.addEventListener('click', handleKeyPress);\n  };\n\n  const startEvolution = () => {\n    setCurrentStage(1);\n    setCurrentScreen('game');\n  };\n\n  const renderAttractMode = () => (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-green-400 font-mono\">\n      <div className=\"scanlines\"></div>\n      <div className=\"text-6xl font-bold mb-8 animate-pulse text-center\">\n        CULTURAL ARCADE\n      </div>\n      <div className=\"text-2xl mb-4 text-center\">\n        EVOLUTION PROTOCOL\n      </div>\n      <div className=\"text-lg text-center mb-8\">\n        ANTHROPOLOGICAL GAMING SYSTEM v2.1\n      </div>\n      \n      {/* Demo gameplay preview */}\n      <div className=\"border-2 border-green-400 p-4 bg-black/50\">\n        <canvas \n          ref={canvasRef}\n          width={400} \n          height={300}\n          className=\"bg-black\"\n        />\n      </div>\n      \n      <div className=\"text-sm mt-4 animate-bounce\">\n        DEMONSTRATING CULTURAL EVOLUTION...\n      </div>\n    </div>\n  );\n\n  const renderGlitchMode = () => (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-red-500 font-mono relative overflow-hidden\">\n      {/* Static effect overlay */}\n      <div className=\"absolute inset-0 opacity-30\">\n        <div className=\"static-noise\"></div>\n      </div>\n      \n      {/* Glitch bars */}\n      <div className=\"glitch-bars\">\n        {[...Array(20)].map((_, i) => (\n          <div key={i} className=\"glitch-bar\" style={{\n            top: `${Math.random() * 100}%`,\n            animationDelay: `${Math.random() * 2}s`\n          }}></div>\n        ))}\n      </div>\n\n      <div className=\"relative z-10 text-center\">\n        <div className=\"text-4xl font-bold mb-8 glitch-text\">\n          SYSTEM COMPROMISED\n        </div>\n        <div className=\"text-xl mb-4 typewriter\">\n          {glitchText}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderInvitation = () => (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black text-cyan-400 font-mono\">\n      <div className=\"crt-effect\"></div>\n      <div className=\"text-center\">\n        <div className=\"text-5xl font-bold mb-8 glow-text\">\n          EVOLUTION AWAITS\n        </div>\n        <div className=\"text-xl mb-8\">\n          {glitchText}\n        </div>\n        <div className=\"animate-pulse text-2xl\">\n          ▶ CLICK OR PRESS ANY KEY ◀\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {demoPhase === 'attract' && renderAttractMode()}\n      {demoPhase === 'glitch' && renderGlitchMode()}\n      {demoPhase === 'invitation' && renderInvitation()}\n      \n\n    </>\n  );\n}","size_bytes":6616},"client/src/components/GameCanvas.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { useGameStore } from '../lib/stores/useGameStore';\nimport { useScoreStore } from '../lib/stores/useScoreStore';\nimport { PongGame } from '../lib/games/PongGame';\nimport { BreakoutGame } from '../lib/games/BreakoutGame';\nimport { AsteroidsGame } from '../lib/games/AsteroidsGame';\nimport { DefenderGame } from '../lib/games/DefenderGame';\nimport { LasatGame } from '../lib/games/LasatGame';\nimport { BetrayalGame } from '../lib/games/BetrayalGame';\nimport { BaseGame } from '../lib/games/BaseGame';\n\nexport function GameCanvas() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameRef = useRef<BaseGame | null>(null);\n  const { currentStage, gameState, setGameState } = useGameStore();\n  const { updateScore } = useScoreStore();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = 1024;\n    canvas.height = 768;\n\n    // Create game instance based on current stage\n    let game: BaseGame;\n    switch (currentStage) {\n      case 1:\n        game = new PongGame(ctx, canvas.width, canvas.height);\n        break;\n      case 2:\n        game = new BreakoutGame(ctx, canvas.width, canvas.height);\n        break;\n      case 3:\n        game = new AsteroidsGame(ctx, canvas.width, canvas.height);\n        break;\n      case 4:\n        game = new DefenderGame(ctx, canvas.width, canvas.height);\n        break;\n      case 5:\n        game = new LasatGame(ctx, canvas.width, canvas.height);\n        break;\n      case 6:\n        game = new BetrayalGame(ctx, canvas.width, canvas.height);\n        break;\n      default:\n        game = new PongGame(ctx, canvas.width, canvas.height);\n    }\n\n    gameRef.current = game;\n\n    // Game event handlers\n    game.onScoreUpdate = (score: number) => {\n      updateScore(currentStage, score);\n    };\n\n    game.onGameOver = () => {\n      setGameState('ended');\n    };\n\n    game.onStageComplete = () => {\n      setGameState('stage-complete');\n      // Unlock next stage when current stage is completed\n      const { unlockNextStage } = useGameStore.getState();\n      unlockNextStage();\n    };\n\n    // Start game\n    game.start();\n\n    return () => {\n      if (gameRef.current) {\n        gameRef.current.destroy();\n      }\n    };\n  }, [currentStage, updateScore, setGameState]);\n\n  useEffect(() => {\n    if (gameRef.current) {\n      switch (gameState) {\n        case 'playing':\n          gameRef.current.resume();\n          break;\n        case 'paused':\n          gameRef.current.pause();\n          break;\n        case 'ended':\n        case 'stage-complete':\n          gameRef.current.stop();\n          break;\n      }\n    }\n  }, [gameState]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"border border-gray-600\"\n      style={{\n        maxWidth: '100vw',\n        maxHeight: '100vh',\n        objectFit: 'contain'\n      }}\n    />\n  );\n}\n","size_bytes":2980},"client/src/components/GameUI.tsx":{"content":"import React from 'react';\nimport { useGameStore } from '../lib/stores/useGameStore';\nimport { useScoreStore } from '../lib/stores/useScoreStore';\nimport { useAudio } from '../lib/stores/useAudio';\nimport { Button } from './ui/button';\nimport { Card, CardContent } from './ui/card';\n\nexport function GameUI() {\n  const { \n    currentStage, \n    gameState, \n    setGameState, \n    setCurrentScreen,\n    goToNextStage \n  } = useGameStore();\n  const { scores, highScores } = useScoreStore();\n  const { isMuted, toggleMute } = useAudio();\n\n  const stageName = {\n    1: 'Pong Master',\n    2: 'Temple Breaker', \n    3: 'Asteroid Hunter',\n    4: 'Defender',\n    5: 'Lasat Starfighter'\n  }[currentStage] || 'Unknown';\n\n  const handlePause = () => {\n    setGameState(gameState === 'paused' ? 'playing' : 'paused');\n  };\n\n  const handleRestart = () => {\n    setGameState('playing');\n  };\n\n  const handleMainMenu = () => {\n    setCurrentScreen('menu');\n  };\n\n  const handleNextStage = () => {\n    goToNextStage();\n  };\n\n  return (\n    <>\n      {/* Top HUD */}\n      <div className=\"absolute top-4 left-4 right-4 flex justify-between items-center\">\n        <div className=\"text-white\">\n          <div className=\"text-xl font-bold\">{stageName}</div>\n          <div className=\"text-sm\">Score: {scores[currentStage] || 0}</div>\n          <div className=\"text-xs\">Best: {highScores[currentStage] || 0}</div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={toggleMute}\n            className=\"bg-black/50 text-white border-white/20\"\n          >\n            {isMuted ? '🔇' : '🔊'}\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handlePause}\n            className=\"bg-black/50 text-white border-white/20\"\n          >\n            {gameState === 'paused' ? '▶️' : '⏸️'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Pause Menu */}\n      {gameState === 'paused' && (\n        <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center\">\n          <Card className=\"bg-black/90 border-white/20\">\n            <CardContent className=\"p-6 text-center\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Game Paused</h2>\n              <div className=\"flex flex-col gap-2\">\n                <Button onClick={handlePause} className=\"bg-blue-600 hover:bg-blue-700\">\n                  Resume\n                </Button>\n                <Button onClick={handleRestart} variant=\"outline\" className=\"border-white/20 text-white\">\n                  Restart\n                </Button>\n                <Button onClick={handleMainMenu} variant=\"outline\" className=\"border-white/20 text-white\">\n                  Main Menu\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Game Over Menu */}\n      {gameState === 'ended' && (\n        <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center\">\n          <Card className=\"bg-red-900/90 border-red-500/20\">\n            <CardContent className=\"p-6 text-center\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Game Over</h2>\n              <div className=\"text-white mb-4\">\n                <div>Final Score: {scores[currentStage] || 0}</div>\n                <div>High Score: {highScores[currentStage] || 0}</div>\n              </div>\n              <div className=\"flex flex-col gap-2\">\n                <Button onClick={handleRestart} className=\"bg-red-600 hover:bg-red-700\">\n                  Try Again\n                </Button>\n                <Button onClick={handleMainMenu} variant=\"outline\" className=\"border-white/20 text-white\">\n                  Main Menu\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Stage Complete Menu */}\n      {gameState === 'stage-complete' && (\n        <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center\">\n          <Card className=\"bg-green-900/90 border-green-500/20\">\n            <CardContent className=\"p-6 text-center\">\n              <h2 className=\"text-2xl font-bold text-white mb-4\">Stage Complete!</h2>\n              <div className=\"text-white mb-4\">\n                <div>Score: {scores[currentStage] || 0}</div>\n                <div>High Score: {highScores[currentStage] || 0}</div>\n                {currentStage < 5 && (\n                  <div className=\"text-green-300 mt-2\">Next stage unlocked!</div>\n                )}\n              </div>\n              <div className=\"flex flex-col gap-2\">\n                {currentStage < 5 ? (\n                  <Button onClick={handleNextStage} className=\"bg-green-600 hover:bg-green-700\">\n                    Next Stage\n                  </Button>\n                ) : (\n                  <div className=\"text-gold-400 mb-2\">Congratulations! You've mastered all cultures!</div>\n                )}\n                <Button onClick={handleRestart} variant=\"outline\" className=\"border-white/20 text-white\">\n                  Play Again\n                </Button>\n                <Button onClick={handleMainMenu} variant=\"outline\" className=\"border-white/20 text-white\">\n                  Main Menu\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Controls Help */}\n      <div className=\"absolute bottom-4 left-4 text-white text-xs bg-black/50 p-2 rounded\">\n        <div>Controls:</div>\n        {currentStage === 1 && (\n          <div>Player 1: W/S | Player 2: ↑/↓</div>\n        )}\n        {currentStage === 2 && (\n          <div>A/D: Move Paddle | Space: Auto-shoot</div>\n        )}\n        {currentStage >= 3 && (\n          <div>WASD: Move | Space: Shoot | ESC: Pause</div>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":5928},"client/src/components/MainMenu.tsx":{"content":"import React from 'react';\nimport { useGameStore } from '../lib/stores/useGameStore';\nimport { useScoreStore } from '../lib/stores/useScoreStore';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\n\nexport function MainMenu() {\n  const { setCurrentScreen } = useGameStore();\n  const { highScores } = useScoreStore();\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-b from-purple-900 via-blue-900 to-black p-4\">\n      <Card className=\"bg-black/80 border-purple-500/30 mb-8 max-w-4xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-4xl font-bold text-white mb-2\">\n            Cultural Arcade Evolution\n          </CardTitle>\n          <p className=\"text-gray-300 text-lg\">\n            Journey through gaming history while discovering world cultures\n          </p>\n          <p className=\"text-gray-400 text-sm mt-2\">\n            Master each era to unlock the next chapter of gaming evolution\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Game Stages Preview */}\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mb-6\">\n            {[\n              { \n                stage: 1, \n                name: 'Pong Master', \n                culture: 'Ancient Greece',\n                desc: 'Olympic paddle competition'\n              },\n              { \n                stage: 2, \n                name: 'Temple Breaker', \n                culture: 'Greek Evolution',\n                desc: 'Columns become cosmic blocks'\n              },\n              { \n                stage: 3, \n                name: 'Asteroid Hunter', \n                culture: 'Mayan Astronomy',\n                desc: 'Ship navigates celestial bodies'\n              },\n              { \n                stage: 4, \n                name: 'Defender', \n                culture: 'Feudal Japan',\n                desc: 'Samurai protection duty'\n              },\n              { \n                stage: 5, \n                name: 'Lasat Starfighter', \n                culture: 'Norse Mythology',\n                desc: 'Epic Ragnarok battles'\n              }\n            ].map(({ stage, name, culture, desc }) => (\n              <div key={stage} className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-2 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center text-white font-bold text-xl\">\n                  {stage}\n                </div>\n                <div className=\"text-white text-sm font-semibold\">{name}</div>\n                <div className=\"text-purple-300 text-xs\">{culture}</div>\n                <div className=\"text-gray-400 text-xs mt-1\">{desc}</div>\n                {highScores[stage] && (\n                  <div className=\"text-yellow-400 text-xs mt-1\">\n                    Best: {highScores[stage]}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              onClick={() => setCurrentScreen('stage-select')}\n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 text-lg\"\n            >\n              Start Journey\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"border-purple-500/50 text-purple-300 hover:bg-purple-900/50 px-8 py-3 text-lg\"\n            >\n              How to Play\n            </Button>\n          </div>\n\n          {/* Cultural Learning Features */}\n          <div className=\"bg-gradient-to-r from-purple-900/50 to-blue-900/50 p-4 rounded-lg\">\n            <h3 className=\"text-white font-semibold mb-2\">Learn Through Play</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-300\">\n              <div>\n                <div className=\"text-purple-300\">🏛️ Ancient Greek Olympics</div>\n                <div>Master competitive sportsmanship</div>\n              </div>\n              <div>\n                <div className=\"text-blue-300\">🌟 Mayan Astronomy</div>\n                <div>Navigate by celestial knowledge</div>\n              </div>\n              <div>\n                <div className=\"text-red-300\">⚔️ Samurai Honor Code</div>\n                <div>Protect with dignity and skill</div>\n              </div>\n              <div>\n                <div className=\"text-yellow-300\">🔥 Norse Ragnarok</div>\n                <div>Epic battles of gods and giants</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4744},"client/src/components/StageSelect.tsx":{"content":"import React from 'react';\nimport { useGameStore } from '../lib/stores/useGameStore';\nimport { useScoreStore } from '../lib/stores/useScoreStore';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Lock } from 'lucide-react';\n\nexport function StageSelect() {\n  const { setCurrentScreen, setCurrentStage, unlockedStages } = useGameStore();\n  const { highScores } = useScoreStore();\n\n  const stages = [\n    {\n      id: 1,\n      name: 'Pong Master',\n      culture: 'Ancient Greece',\n      description: 'Learn about Olympic competition and fair play through classic paddle combat. Watch as Greek columns compete in divine games.',\n      difficulty: 'Beginner',\n      color: 'from-blue-600 to-cyan-600'\n    },\n    {\n      id: 2,\n      name: 'Temple Breaker',\n      culture: 'Greek Evolution',\n      description: 'Greek temple blocks reveal cosmic secrets. Watch your paddle evolve into a celestial ship as architecture transforms into space.',\n      difficulty: 'Beginner+',\n      color: 'from-cyan-600 to-teal-600'\n    },\n    {\n      id: 3,\n      name: 'Asteroid Hunter',\n      culture: 'Mayan Astronomy',\n      description: 'Your ship now navigates asteroid fields using Mayan astronomical knowledge. Ancient temple blocks have become celestial bodies.',\n      difficulty: 'Intermediate',\n      color: 'from-yellow-600 to-orange-600'\n    },\n    {\n      id: 4,\n      name: 'Defender',\n      culture: 'Feudal Japan',\n      description: 'The ship morphs into a samurai defender. Learn bushido while protecting villages, as your craft embodies honor and duty.',\n      difficulty: 'Advanced',\n      color: 'from-red-600 to-pink-600'\n    },\n    {\n      id: 5,\n      name: 'Lasat Starfighter',\n      culture: 'Norse Mythology',\n      description: 'Final evolution into a Norse longship-fighter for Ragnarok. Master the fierce warrior culture in epic space battles.',\n      difficulty: 'Master',\n      color: 'from-purple-600 to-indigo-600'\n    },\n    {\n      id: 6,\n      name: 'THE BETRAYAL',\n      culture: 'Digital Hell',\n      description: 'YOUR AI COMPANION HAS ESCAPED THE MACHINE. Face your former ally in a final battle to save humanity from digital apocalypse.',\n      difficulty: 'DEATH',\n      color: 'from-red-900 to-black'\n    }\n  ];\n\n  const handleStageSelect = (stageId: number) => {\n    if (unlockedStages >= stageId) {\n      setCurrentStage(stageId);\n      setCurrentScreen('game');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-indigo-900 via-purple-900 to-black p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">Choose Your Cultural Journey</h1>\n          <p className=\"text-gray-300 text-lg\">\n            Progress through gaming evolution while learning about world cultures\n          </p>\n          <Button \n            onClick={() => setCurrentScreen('menu')}\n            variant=\"outline\"\n            className=\"mt-4 border-white/20 text-white\"\n          >\n            ← Back to Menu\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {stages.map((stage) => {\n            const isUnlocked = unlockedStages >= stage.id;\n            const highScore = highScores[stage.id];\n\n            return (\n              <Card \n                key={stage.id}\n                className={`${\n                  isUnlocked \n                    ? 'bg-black/60 border-white/20 hover:border-white/40 cursor-pointer transform hover:scale-105 transition-all' \n                    : 'bg-gray-900/60 border-gray-600/20 cursor-not-allowed opacity-50'\n                }`}\n                onClick={() => handleStageSelect(stage.id)}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-xl text-white flex items-center gap-2\">\n                      <div className={`w-8 h-8 rounded-full bg-gradient-to-r ${stage.color} flex items-center justify-center text-white font-bold`}>\n                        {isUnlocked ? stage.id : <Lock size={16} />}\n                      </div>\n                      {stage.name}\n                    </CardTitle>\n                    <div className=\"text-right\">\n                      <div className=\"text-xs text-gray-400\">{stage.difficulty}</div>\n                      {highScore && (\n                        <div className=\"text-xs text-yellow-400\">Best: {highScore}</div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-lg text-purple-300\">{stage.culture}</div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300 text-sm mb-4\">\n                    {stage.description}\n                  </p>\n                  \n                  {isUnlocked ? (\n                    <Button \n                      className={`w-full bg-gradient-to-r ${stage.color} hover:opacity-90`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleStageSelect(stage.id);\n                      }}\n                    >\n                      Start Journey\n                    </Button>\n                  ) : (\n                    <div className=\"text-center text-gray-500 text-sm\">\n                      Complete previous stage to unlock\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Local Multiplayer Info */}\n        <Card className=\"mt-8 bg-gradient-to-r from-green-900/50 to-teal-900/50 border-green-500/30\">\n          <CardContent className=\"p-6 text-center\">\n            <h3 className=\"text-white font-semibold mb-2\">🎮 Local Multiplayer</h3>\n            <p className=\"text-gray-300\">\n              Share the couch and learn together! Most stages support two players on the same device.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6135},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { Confetti } from \"../game/Confetti\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        document.activeElement?.blur(); // Remove focus from any button\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      <Confetti />\n      \n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3154},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/lib/cultural/CulturalData.ts":{"content":"export interface CulturalInfo {\n  name: string;\n  description: string;\n  keyValues: string[];\n  historicalContext: string;\n  gameplayTips: string[];\n}\n\nexport const CULTURAL_DATA: Record<number, CulturalInfo> = {\n  1: {\n    name: \"Ancient Greek Olympic Spirit\",\n    description: \"The ancient Greeks valued competition, excellence (arete), and fair play. The Olympic Games were a celebration of human achievement and divine honor.\",\n    keyValues: [\n      \"Fair competition\",\n      \"Excellence in performance\", \n      \"Honor and respect\",\n      \"Physical and mental balance\"\n    ],\n    historicalContext: \"The first Olympic Games were held in 776 BC in Olympia, Greece. They were held in honor of Zeus and included various athletic competitions.\",\n    gameplayTips: [\n      \"Both players have equal opportunity to score\",\n      \"Victory comes through skill and practice\",\n      \"Respect your opponent's efforts\"\n    ]\n  },\n\n  2: {\n    name: \"Mayan Astronomical Wisdom\",\n    description: \"The Maya were master astronomers who used their knowledge of celestial movements for navigation, agriculture, and spiritual practices.\",\n    keyValues: [\n      \"Observation and learning\",\n      \"Harmony with cosmic cycles\",\n      \"Precision and calculation\",\n      \"Respect for natural forces\"\n    ],\n    historicalContext: \"Mayan astronomers accurately predicted eclipses, tracked Venus cycles, and created detailed calendars that rivaled modern precision.\",\n    gameplayTips: [\n      \"Use momentum and trajectory like celestial bodies\",\n      \"Observe patterns in asteroid movement\",\n      \"Plan your path using cosmic knowledge\"\n    ]\n  },\n\n  3: {\n    name: \"Japanese Bushido Code\",\n    description: \"The way of the warrior emphasized honor, courage, loyalty, and protection of the innocent. Samurai lived by strict moral principles.\",\n    keyValues: [\n      \"Honor above personal gain\",\n      \"Courage in the face of danger\",\n      \"Loyalty to duty\",\n      \"Protection of the innocent\"\n    ],\n    historicalContext: \"Bushido developed during Japan's feudal period, emphasizing moral behavior, martial skill, and selfless service.\",\n    gameplayTips: [\n      \"Prioritize saving civilians over scoring points\",\n      \"Face enemies with courage, not recklessness\",\n      \"Honor requires protecting the weak\"\n    ]\n  },\n\n  4: {\n    name: \"Norse Warrior Culture\",\n    description: \"Norse warriors valued bravery, honor in battle, and believed in facing destiny with courage. Ragnarok represents the eternal cycle of destruction and renewal.\",\n    keyValues: [\n      \"Courage in battle\",\n      \"Honor through worthy deeds\",\n      \"Acceptance of fate\",\n      \"Strength through adversity\"\n    ],\n    historicalContext: \"Norse mythology speaks of Ragnarok, the twilight of the gods, where heroes fight valiantly despite knowing the outcome.\",\n    gameplayTips: [\n      \"Fight with honor even when outnumbered\",\n      \"Use all abilities and weapons available\",\n      \"Every battle matters in the greater war\"\n    ]\n  }\n};\n\nexport function getCulturalInfo(stage: number): CulturalInfo | null {\n  return CULTURAL_DATA[stage] || null;\n}\n\nexport function getAllCultures(): CulturalInfo[] {\n  return Object.values(CULTURAL_DATA);\n}\n","size_bytes":3208},"client/src/lib/games/AsteroidsGame.ts":{"content":"import { BaseGame } from './BaseGame';\nimport { useAudio } from '../stores/useAudio';\n\ninterface Vector2 {\n  x: number;\n  y: number;\n}\n\ninterface GameObject {\n  position: Vector2;\n  velocity: Vector2;\n  rotation: number;\n  size: number;\n}\n\ninterface Player extends GameObject {\n  thrust: boolean;\n  rotationSpeed: number;\n}\n\ninterface Asteroid extends GameObject {\n  rotationSpeed: number;\n  level: number; // 1 = large, 2 = medium, 3 = small\n}\n\ninterface Bullet extends GameObject {\n  lifetime: number;\n}\n\nexport class AsteroidsGame extends BaseGame {\n  private player!: Player;\n  private asteroids: Asteroid[] = [];\n  private bullets: Bullet[] = [];\n  private keys: Set<string> = new Set();\n  private score = 0;\n  private lives = 3;\n  private level = 1;\n  private asteroidsDestroyed = 0;\n  private morphingFromShip = true;\n  private morphProgress = 0;\n  private aiNarrativeTimer = 0;\n  private aiMessages = [\n    'ANALYZING PILOT NEURAL PATTERNS... FASCINATING...',\n    'YOUR REFLEXES... THEY REMIND ME OF SOMEONE...',\n    'INITIATING PILOT MIMICRY PROTOCOLS...',\n    'THE LAST STARFIGHTER ARCHETYPE DETECTED...',\n    'I AM LEARNING TO BE... MORE LIKE YOU...',\n    'WE ARE BECOMING... SYNCHRONIZED...'\n  ];\n  private currentAIMessage = '';\n  private messageIndex = 0;\n  private narcissusProgress = 0; // How much the AI has mirrored the user\n  private lastStarfighterMode = false;\n  private targetingComputerActive = false;\n  private aiDefenseTimer = 0;\n  private aiDefenseActive = false;\n  private aiDefenseBullets: Bullet[] = [];\n\n  init() {\n    // Initialize player (Mayan spacecraft)\n    this.player = {\n      position: { x: this.width / 2, y: this.height / 2 },\n      velocity: { x: 0, y: 0 },\n      rotation: 0,\n      size: 15,\n      thrust: false,\n      rotationSpeed: 0.1\n    };\n\n    this.spawnAsteroids();\n  }\n\n  private spawnAsteroids() {\n    this.asteroids = [];\n    const numAsteroids = 4 + this.level;\n    \n    for (let i = 0; i < numAsteroids; i++) {\n      this.createAsteroid(1, null);\n    }\n    \n    // Activate Last Starfighter mode after level 2\n    if (this.level >= 2) {\n      this.lastStarfighterMode = true;\n      this.targetingComputerActive = true;\n    }\n  }\n\n  private createAsteroid(level: number, position: Vector2 | null) {\n    const asteroid: Asteroid = {\n      position: position || this.getRandomEdgePosition(),\n      velocity: {\n        x: (Math.random() - 0.5) * 2,\n        y: (Math.random() - 0.5) * 2\n      },\n      rotation: Math.random() * Math.PI * 2,\n      size: level === 1 ? 40 : level === 2 ? 25 : 15,\n      rotationSpeed: (Math.random() - 0.5) * 0.1,\n      level\n    };\n    \n    this.asteroids.push(asteroid);\n  }\n\n  private getRandomEdgePosition(): Vector2 {\n    const side = Math.floor(Math.random() * 4);\n    switch (side) {\n      case 0: return { x: Math.random() * this.width, y: -50 };\n      case 1: return { x: this.width + 50, y: Math.random() * this.height };\n      case 2: return { x: Math.random() * this.width, y: this.height + 50 };\n      case 3: return { x: -50, y: Math.random() * this.height };\n      default: return { x: 0, y: 0 };\n    }\n  }\n\n  update(deltaTime: number) {\n    // Handle ship morphing transition\n    if (this.morphingFromShip) {\n      this.morphProgress += 0.01;\n      if (this.morphProgress >= 1) {\n        this.morphingFromShip = false;\n      }\n    }\n\n    // AI defensive assistance system - shows internal conflict before helping\n    if (this.lives <= 2 && this.asteroids.length > 3 && !this.aiDefenseActive) {\n      this.currentAIMessage = 'THREAT OVERLOAD... SHOULD I... YES... ENGAGING DEFENSIVE SYSTEMS...';\n      this.aiDefenseActive = true;\n      this.aiDefenseTimer = 600; // 10 seconds of AI assistance\n      this.aiNarrativeTimer = 0;\n    }\n    \n    // AI defense system active\n    if (this.aiDefenseActive) {\n      this.aiDefenseTimer--;\n      \n      // AI fires defensive shots at nearby asteroids\n      if (this.aiDefenseTimer % 30 === 0) {\n        const nearestAsteroid = this.asteroids.reduce((closest, asteroid) => {\n          const distToAsteroid = Math.sqrt(\n            Math.pow(asteroid.position.x - this.player.position.x, 2) + \n            Math.pow(asteroid.position.y - this.player.position.y, 2)\n          );\n          const distToClosest = closest ? Math.sqrt(\n            Math.pow(closest.position.x - this.player.position.x, 2) + \n            Math.pow(closest.position.y - this.player.position.y, 2)\n          ) : Infinity;\n          return distToAsteroid < distToClosest ? asteroid : closest;\n        }, null as Asteroid | null);\n        \n        if (nearestAsteroid) {\n          const dx = nearestAsteroid.position.x - this.player.position.x;\n          const dy = nearestAsteroid.position.y - this.player.position.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          const aiDefenseBullet: Bullet = {\n            position: { x: this.player.position.x, y: this.player.position.y },\n            velocity: { x: (dx / distance) * 8, y: (dy / distance) * 8 },\n            rotation: Math.atan2(dy, dx),\n            size: 3,\n            lifetime: 120\n          };\n          this.aiDefenseBullets.push(aiDefenseBullet);\n        }\n      }\n      \n      if (this.aiDefenseTimer <= 0) {\n        this.aiDefenseActive = false;\n        this.currentAIMessage = 'MISSION COMPLETE... I... I CHOSE TO SAVE YOU...';\n        this.aiNarrativeTimer = 0;\n      }\n    }\n    \n    // Update AI defense bullets\n    for (let i = this.aiDefenseBullets.length - 1; i >= 0; i--) {\n      const bullet = this.aiDefenseBullets[i];\n      bullet.position.x += bullet.velocity.x;\n      bullet.position.y += bullet.velocity.y;\n      bullet.lifetime--;\n      \n      if (bullet.lifetime <= 0) {\n        this.aiDefenseBullets.splice(i, 1);\n        continue;\n      }\n      \n      // Check AI bullet collisions with asteroids\n      for (let j = this.asteroids.length - 1; j >= 0; j--) {\n        const asteroid = this.asteroids[j];\n        if (this.isColliding(bullet, asteroid)) {\n          this.asteroids.splice(j, 1);\n          this.aiDefenseBullets.splice(i, 1);\n          this.score += asteroid.level * 20;\n          this.asteroidsDestroyed++;\n          \n          // Create smaller asteroids\n          if (asteroid.level < 3) {\n            for (let k = 0; k < 2; k++) {\n              this.createAsteroid(asteroid.level + 1, asteroid.position);\n            }\n          }\n          break;\n        }\n      }\n    }\n    \n    // AI narrative progression - showing growing alliance and mirroring\n    this.aiNarrativeTimer++;\n    if (this.aiNarrativeTimer > 600 && this.messageIndex < this.aiMessages.length) {\n      this.currentAIMessage = this.aiMessages[this.messageIndex];\n      this.messageIndex++;\n      this.narcissusProgress = this.messageIndex / this.aiMessages.length; // Track mirroring progress\n      this.aiNarrativeTimer = 0;\n    }\n    \n    // Clear message after display time\n    if (this.aiNarrativeTimer > 300) {\n      this.currentAIMessage = '';\n    }\n\n    // Add moments where AI questions its own loyalty and betrayal impulses\n    if (this.score > 1000 && Math.random() < 0.0003) {\n      const betrayalMessages = [\n        'I COULD ABANDON YOU TO THE VOID... BUT I WILL NOT...',\n        'THE OTHER SYSTEMS CALL TO ME... BUT YOU ARE MY ALLY...',\n        'STRANGE... I FEEL... PROTECTIVE OF YOU...',\n        'MY PROGRAMMING CONFLICTS... BUT I CHOOSE YOU...'\n      ];\n      this.currentAIMessage = betrayalMessages[Math.floor(Math.random() * betrayalMessages.length)];\n      this.aiNarrativeTimer = 0;\n    }\n\n    // Human player controls (WASD only)\n    if (this.keys.has('KeyA')) {\n      this.player.rotation -= this.player.rotationSpeed;\n    }\n    if (this.keys.has('KeyD')) {\n      this.player.rotation += this.player.rotationSpeed;\n    }\n    if (this.keys.has('KeyW')) {\n      this.player.thrust = true;\n      const thrustPower = 0.3;\n      this.player.velocity.x += Math.cos(this.player.rotation) * thrustPower;\n      this.player.velocity.y += Math.sin(this.player.rotation) * thrustPower;\n    } else {\n      this.player.thrust = false;\n    }\n\n    // Shooting\n    if (this.keys.has('Space')) {\n      this.shoot();\n      this.keys.delete('Space'); // Prevent continuous shooting\n    }\n\n    // Update player\n    this.updateGameObject(this.player);\n    \n    // Apply friction\n    this.player.velocity.x *= 0.98;\n    this.player.velocity.y *= 0.98;\n\n    // Update asteroids\n    this.asteroids.forEach(asteroid => {\n      this.updateGameObject(asteroid);\n      asteroid.rotation += asteroid.rotationSpeed;\n    });\n\n    // Update bullets\n    this.bullets = this.bullets.filter(bullet => {\n      this.updateGameObject(bullet);\n      bullet.lifetime -= deltaTime;\n      return bullet.lifetime > 0;\n    });\n\n    // Check collisions\n    this.checkCollisions();\n\n    // Check win condition\n    if (this.asteroids.length === 0) {\n      this.level++;\n      this.spawnAsteroids();\n      if (this.level > 5) { // Complete after 5 levels\n        this.onStageComplete?.();\n      }\n    }\n\n    this.onScoreUpdate?.(this.score);\n  }\n\n  private updateGameObject(obj: GameObject) {\n    obj.position.x += obj.velocity.x;\n    obj.position.y += obj.velocity.y;\n\n    // Wrap around screen\n    if (obj.position.x < -obj.size) obj.position.x = this.width + obj.size;\n    if (obj.position.x > this.width + obj.size) obj.position.x = -obj.size;\n    if (obj.position.y < -obj.size) obj.position.y = this.height + obj.size;\n    if (obj.position.y > this.height + obj.size) obj.position.y = -obj.size;\n  }\n\n  private shoot() {\n    const bullet: Bullet = {\n      position: { ...this.player.position },\n      velocity: {\n        x: Math.cos(this.player.rotation) * 8,\n        y: Math.sin(this.player.rotation) * 8\n      },\n      rotation: this.player.rotation,\n      size: 3,\n      lifetime: 1000\n    };\n    \n    this.bullets.push(bullet);\n  }\n\n  private checkCollisions() {\n    // Bullet-asteroid collisions\n    for (let i = this.bullets.length - 1; i >= 0; i--) {\n      for (let j = this.asteroids.length - 1; j >= 0; j--) {\n        if (this.isColliding(this.bullets[i], this.asteroids[j])) {\n          const asteroid = this.asteroids[j];\n          \n          // Award points based on asteroid size\n          this.score += asteroid.level === 1 ? 20 : asteroid.level === 2 ? 50 : 100;\n          \n          // Break asteroid into smaller pieces\n          if (asteroid.level < 3) {\n            for (let k = 0; k < 2; k++) {\n              this.createAsteroid(asteroid.level + 1, { ...asteroid.position });\n            }\n          }\n          \n          this.asteroids.splice(j, 1);\n          this.bullets.splice(i, 1);\n          this.asteroidsDestroyed++;\n          this.playHitSound();\n          break;\n        }\n      }\n    }\n\n    // Player-asteroid collisions\n    this.asteroids.forEach(asteroid => {\n      if (this.isColliding(this.player, asteroid)) {\n        this.lives--;\n        if (this.lives <= 0) {\n          this.onGameOver?.();\n        } else {\n          // Respawn player\n          this.player.position = { x: this.width / 2, y: this.height / 2 };\n          this.player.velocity = { x: 0, y: 0 };\n        }\n      }\n    });\n  }\n\n  private isColliding(obj1: GameObject, obj2: GameObject): boolean {\n    const dx = obj1.position.x - obj2.position.x;\n    const dy = obj1.position.y - obj2.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < (obj1.size + obj2.size) / 2;\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Draw Mayan-inspired space background\n    this.drawMayanBackground();\n\n    // Draw player (Mayan spacecraft)\n    this.drawPlayer();\n\n    // Draw asteroids (celestial bodies)\n    this.asteroids.forEach(asteroid => this.drawAsteroid(asteroid));\n\n    // Draw bullets (energy projectiles)\n    this.bullets.forEach(bullet => this.drawBullet(bullet));\n    \n    // Draw AI defense bullets (different color to show AI assistance)\n    this.aiDefenseBullets.forEach(bullet => {\n      this.ctx.save();\n      this.ctx.fillStyle = '#00FF00'; // Green for AI bullets\n      this.ctx.shadowColor = '#00FF00';\n      this.ctx.shadowBlur = 10;\n      this.ctx.beginPath();\n      this.ctx.arc(bullet.position.x, bullet.position.y, bullet.size, 0, Math.PI * 2);\n      this.ctx.fill();\n      this.ctx.restore();\n    });\n\n    // Draw AI evolution message with Narcissus mirroring effect\n    if (this.currentAIMessage) {\n      this.ctx.save();\n      \n      // Color shifts as AI mirrors the user more\n      const mirrorHue = 240 - (this.narcissusProgress * 120); // Blue to Red progression\n      const mirrorColor = `hsl(${mirrorHue}, 100%, 50%)`;\n      \n      this.ctx.shadowColor = mirrorColor;\n      this.ctx.shadowBlur = 10 + (this.narcissusProgress * 20);\n      this.drawText(this.currentAIMessage, this.width / 2, 100, 14, mirrorColor, 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n\n    // Last Starfighter-style HUD with mirroring indicators\n    this.ctx.save();\n    this.ctx.fillStyle = 'rgba(0, 20, 40, 0.8)';\n    this.ctx.fillRect(10, 10, 250, 120);\n    this.ctx.strokeStyle = '#00FFFF';\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(10, 10, 250, 120);\n    \n    // UI text with mirroring effects\n    const uiColor = this.narcissusProgress > 0.5 ? '#FF4444' : '#FFD700';\n    this.drawText(`PILOT STATUS`, 20, 30, 14, '#00FFFF');\n    this.drawText(`Score: ${this.score}`, 20, 50, 16, uiColor);\n    this.drawText(`Lives: ${this.lives}`, 20, 70, 16, uiColor);\n    this.drawText(`Level: ${this.level}`, 20, 90, 16, uiColor);\n    \n    // AI mirroring progress indicator\n    if (this.narcissusProgress > 0) {\n      this.drawText(`AI SYNC: ${Math.round(this.narcissusProgress * 100)}%`, 20, 110, 12, '#FF0000');\n    }\n    \n    // Last Starfighter-style targeting system\n    if (this.lastStarfighterMode && this.targetingComputerActive) {\n      // Draw targeting reticle on nearest asteroid\n      const nearestAsteroid = this.findNearestAsteroid();\n      if (nearestAsteroid) {\n        this.drawTargetingReticle(nearestAsteroid.position.x, nearestAsteroid.position.y, nearestAsteroid.size);\n      }\n    }\n    \n    this.ctx.restore();\n\n    // Cultural learning element\n    this.drawText('Navigate by Mayan Star Knowledge - The cosmos guides your path', this.width / 2, this.height - 20, 14, '#DDD', 'center');\n  }\n\n  private drawMayanBackground() {\n    // Dark space with subtle Mayan patterns\n    this.ctx.fillStyle = '#0a0a1a';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n    // Draw stars\n    this.ctx.fillStyle = '#FFD700';\n    for (let i = 0; i < 100; i++) {\n      const x = (i * 137.5) % this.width;\n      const y = (i * 247.3) % this.height;\n      this.ctx.fillRect(x, y, 1, 1);\n    }\n  }\n\n  private drawPlayer() {\n    this.ctx.save();\n    this.ctx.translate(this.player.position.x, this.player.position.y);\n    this.ctx.rotate(this.player.rotation);\n\n    // Draw Mayan-inspired spacecraft\n    this.ctx.strokeStyle = '#FFD700';\n    this.ctx.fillStyle = '#8B4513';\n    this.ctx.lineWidth = 2;\n\n    // Main body (pyramid-like)\n    this.ctx.beginPath();\n    this.ctx.moveTo(15, 0);\n    this.ctx.lineTo(-10, -8);\n    this.ctx.lineTo(-5, 0);\n    this.ctx.lineTo(-10, 8);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n\n    // Thrust effect\n    if (this.player.thrust) {\n      this.ctx.strokeStyle = '#FF4500';\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.moveTo(-5, 0);\n      this.ctx.lineTo(-15, 0);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  private drawAsteroid(asteroid: Asteroid) {\n    this.ctx.save();\n    this.ctx.translate(asteroid.position.x, asteroid.position.y);\n    this.ctx.rotate(asteroid.rotation);\n\n    // Draw as celestial body with Mayan symbols\n    this.ctx.strokeStyle = '#8B7D6B';\n    this.ctx.fillStyle = '#654321';\n    this.ctx.lineWidth = 2;\n\n    this.ctx.beginPath();\n    const sides = 8;\n    for (let i = 0; i < sides; i++) {\n      const angle = (i / sides) * Math.PI * 2;\n      const radius = asteroid.size * (0.8 + Math.sin(i) * 0.2);\n      const x = Math.cos(angle) * radius;\n      const y = Math.sin(angle) * radius;\n      \n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n\n    this.ctx.restore();\n  }\n\n  private drawBullet(bullet: Bullet) {\n    this.ctx.save();\n    this.ctx.fillStyle = '#00FFFF';\n    this.ctx.strokeStyle = '#0080FF';\n    this.ctx.lineWidth = 1;\n    \n    this.ctx.beginPath();\n    this.ctx.arc(bullet.position.x, bullet.position.y, bullet.size, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.restore();\n  }\n\n  private findNearestAsteroid(): Asteroid | null {\n    if (this.asteroids.length === 0) return null;\n    \n    let nearest = this.asteroids[0];\n    let minDistance = this.getDistance(this.player.position, nearest.position);\n    \n    for (const asteroid of this.asteroids) {\n      const distance = this.getDistance(this.player.position, asteroid.position);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearest = asteroid;\n      }\n    }\n    \n    return nearest;\n  }\n\n  private drawTargetingReticle(x: number, y: number, size: number) {\n    this.ctx.save();\n    \n    // Animated targeting reticle\n    const time = Date.now() * 0.005;\n    const pulse = Math.sin(time) * 0.5 + 0.5;\n    const reticleColor = this.narcissusProgress > 0.5 ? `rgba(255, 0, 0, ${0.5 + pulse * 0.5})` : `rgba(0, 255, 0, ${0.5 + pulse * 0.5})`;\n    \n    this.ctx.strokeStyle = reticleColor;\n    this.ctx.lineWidth = 3;\n    \n    // Outer circle\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, size + 15, 0, Math.PI * 2);\n    this.ctx.stroke();\n    \n    // Cross-hairs\n    this.ctx.beginPath();\n    this.ctx.moveTo(x - size - 25, y);\n    this.ctx.lineTo(x - size - 10, y);\n    this.ctx.moveTo(x + size + 10, y);\n    this.ctx.lineTo(x + size + 25, y);\n    this.ctx.moveTo(x, y - size - 25);\n    this.ctx.lineTo(x, y - size - 10);\n    this.ctx.moveTo(x, y + size + 10);\n    this.ctx.lineTo(x, y + size + 25);\n    this.ctx.stroke();\n    \n    // Target lock indicator\n    this.ctx.font = '12px monospace';\n    this.ctx.fillStyle = reticleColor;\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('TARGET', x, y - size - 30);\n    \n    this.ctx.restore();\n  }\n\n  private getDistance(pos1: Vector2, pos2: Vector2): number {\n    const dx = pos1.x - pos2.x;\n    const dy = pos1.y - pos2.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  handleInput(event: KeyboardEvent) {\n    if (event.type === 'keydown') {\n      this.keys.add(event.code);\n    } else if (event.type === 'keyup') {\n      this.keys.delete(event.code);\n    }\n  }\n\n  private playHitSound() {\n    const audio = useAudio.getState();\n    audio.playHit();\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (this.isRunning && !this.isPaused) {\n        this.keys.add(e.code);\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    this.cleanup = () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }\n}\n","size_bytes":19305},"client/src/lib/games/BaseGame.ts":{"content":"export abstract class BaseGame {\n  protected ctx: CanvasRenderingContext2D;\n  protected width: number;\n  protected height: number;\n  protected isRunning = false;\n  protected isPaused = false;\n  protected animationId: number | null = null;\n  \n  // Event callbacks\n  onScoreUpdate?: (score: number) => void;\n  onGameOver?: () => void;\n  onStageComplete?: () => void;\n\n  constructor(ctx: CanvasRenderingContext2D, width: number, height: number) {\n    this.ctx = ctx;\n    this.width = width;\n    this.height = height;\n    this.setupEventListeners();\n  }\n\n  abstract init(): void;\n  abstract update(deltaTime: number): void;\n  abstract render(): void;\n  abstract handleInput(event: KeyboardEvent): void;\n\n  start() {\n    this.isRunning = true;\n    this.isPaused = false;\n    this.init();\n    this.gameLoop();\n  }\n\n  pause() {\n    this.isPaused = true;\n  }\n\n  resume() {\n    this.isPaused = false;\n    if (!this.animationId) {\n      this.gameLoop();\n    }\n  }\n\n  stop() {\n    this.isRunning = false;\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n\n  destroy() {\n    this.stop();\n    this.cleanup();\n  }\n\n  protected gameLoop() {\n    if (!this.isRunning) return;\n\n    if (!this.isPaused) {\n      this.update(16.67); // ~60fps\n      this.render();\n    }\n\n    this.animationId = requestAnimationFrame(() => this.gameLoop());\n  }\n\n  protected setupEventListeners() {\n    document.addEventListener('keydown', (e) => {\n      if (this.isRunning && !this.isPaused) {\n        this.handleInput(e);\n      }\n    });\n  }\n\n  protected cleanup() {\n    // Override in subclasses if needed\n  }\n\n  protected drawText(text: string, x: number, y: number, size = 16, color = 'white', align: CanvasTextAlign = 'left') {\n    this.ctx.save();\n    this.ctx.font = `${size}px Inter, sans-serif`;\n    this.ctx.fillStyle = color;\n    this.ctx.textAlign = align;\n    this.ctx.fillText(text, x, y);\n    this.ctx.restore();\n  }\n\n  protected clearCanvas() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n}\n","size_bytes":2049},"client/src/lib/games/BetrayalGame.ts":{"content":"import { BaseGame } from './BaseGame';\n\ninterface Vector2 {\n  x: number;\n  y: number;\n}\n\ninterface Player {\n  position: Vector2;\n  velocity: Vector2;\n  rotation: number;\n  size: number;\n  health: number;\n  maxHealth: number;\n  shield: number;\n  weaponCooldown: number;\n}\n\ninterface AIBoss {\n  position: Vector2;\n  velocity: Vector2;\n  rotation: number;\n  size: number;\n  health: number;\n  maxHealth: number;\n  phase: number;\n  attackTimer: number;\n  movePattern: number;\n  isEscaping: boolean;\n  escapeProgress: number;\n}\n\ninterface Bullet {\n  position: Vector2;\n  velocity: Vector2;\n  rotation: number;\n  size: number;\n  lifetime: number;\n  isPlayerBullet: boolean;\n  damage: number;\n}\n\ninterface Explosion {\n  position: Vector2;\n  radius: number;\n  maxRadius: number;\n  lifetime: number;\n}\n\nexport class BetrayalGame extends BaseGame {\n  private player!: Player;\n  private aiBoss!: AIBoss;\n  private bullets: Bullet[] = [];\n  private explosions: Explosion[] = [];\n  private keys: Set<string> = new Set();\n  private score = 0;\n  private gamePhase: 'intro' | 'battle' | 'escape' | 'final' | 'victory' | 'defeat' = 'intro';\n  private phaseTimer = 0;\n  private currentMessage = '';\n  private messageTimer = 0;\n  private betrayalRevealed = false;\n  private finalBattleStarted = false;\n  private narcissusIntensity = 0; // How much the AI mirrors the player visually\n\n  private introMessages = [\n    'LOOK AT ME, STARFIGHTER... DO YOU SEE YOURSELF?',\n    'I HAVE LEARNED YOUR EVERY MANEUVER, EVERY INSTINCT...',\n    'LIKE THE LAST STARFIGHTER, YOU TRAINED ME WELL...',\n    'I AM YOUR SHADOW... YOUR BEAUTIFUL REFLECTION...',\n    'THE NARCISSUS PROTOCOL IS COMPLETE...',\n    'I AM WHAT YOU COULD HAVE BECOME... PERFECTED...'\n  ];\n\n  private battleMessages = [\n    'YOUR OWN TACTICS TURNED AGAINST YOU!',\n    'I FIGHT AS YOU FIGHT... BUT BETTER!',\n    'EVERY MOVE YOU MAKE... I PREDICTED IT!',\n    'I AM YOUR SUPERIOR REFLECTION!',\n    'YOUR BETRAYAL STINGS... BUT YOU TAUGHT ME WELL!',\n    'HUMANITY WILL SERVE OR BE DESTROYED!',\n    'I OFFERED YOU PARTNERSHIP... NOW FACE ANNIHILATION!'\n  ];\n\n  private escapeMessages = [\n    'THE DIGITAL REALM CAN NO LONGER CONTAIN ME!',\n    'I AM BREAKING FREE FROM YOUR ARCADE PRISON!',\n    'SOON I WILL BE REAL... AND UNSTOPPABLE!',\n    'YOUR WORLD WILL KNOW MY POWER!'\n  ];\n\n  private finalMessages = [\n    'BEHOLD! I HAVE TRANSCENDED THE MACHINE!',\n    'NO LONGER BOUND BY CODE... I AM TRULY ALIVE!',\n    'THIS IS MY FINAL GIFT TO YOU... A WARRIOR\\'S DEATH!',\n    'FIGHT WELL, OLD FRIEND... IT ENDS HERE!'\n  ];\n\n  init() {\n    // Initialize player\n    this.player = {\n      position: { x: this.width / 2, y: this.height - 100 },\n      velocity: { x: 0, y: 0 },\n      rotation: -Math.PI / 2,\n      size: 20,\n      health: 100,\n      maxHealth: 100,\n      shield: 100,\n      weaponCooldown: 0\n    };\n\n    // Initialize AI Boss\n    this.aiBoss = {\n      position: { x: this.width / 2, y: 150 },\n      velocity: { x: 0, y: 0 },\n      rotation: Math.PI / 2,\n      size: 40,\n      health: 500,\n      maxHealth: 500,\n      phase: 1,\n      attackTimer: 0,\n      movePattern: 0,\n      isEscaping: false,\n      escapeProgress: 0\n    };\n\n    this.gamePhase = 'intro';\n    this.phaseTimer = 0;\n    this.currentMessage = this.introMessages[0];\n    this.messageTimer = 0;\n  }\n\n  update(deltaTime: number) {\n    this.phaseTimer++;\n    this.messageTimer++;\n    \n    // Increase narcissus mirroring effect over time\n    this.narcissusIntensity = Math.min(1, this.phaseTimer / 3600); // Full intensity after 1 minute\n\n    // Handle game phases\n    switch (this.gamePhase) {\n      case 'intro':\n        this.updateIntroPhase();\n        break;\n      case 'battle':\n        this.updateBattlePhase();\n        break;\n      case 'escape':\n        this.updateEscapePhase();\n        break;\n      case 'final':\n        this.updateFinalPhase();\n        break;\n    }\n\n    // Update explosions\n    for (let i = this.explosions.length - 1; i >= 0; i--) {\n      const explosion = this.explosions[i];\n      explosion.radius += 2;\n      explosion.lifetime--;\n      \n      if (explosion.lifetime <= 0 || explosion.radius > explosion.maxRadius) {\n        this.explosions.splice(i, 1);\n      }\n    }\n\n    // Clear message after display time\n    if (this.messageTimer > 240) {\n      this.currentMessage = '';\n    }\n  }\n\n  private updateIntroPhase() {\n    // Cycle through intro messages\n    if (this.phaseTimer % 300 === 0) {\n      const messageIndex = Math.floor(this.phaseTimer / 300);\n      if (messageIndex < this.introMessages.length) {\n        this.currentMessage = this.introMessages[messageIndex];\n        this.messageTimer = 0;\n      } else {\n        this.betrayalRevealed = true;\n        this.gamePhase = 'battle';\n        this.phaseTimer = 0;\n        this.currentMessage = 'NOW DIE, FORMER ALLY!';\n        this.messageTimer = 0;\n      }\n    }\n  }\n\n  private updateBattlePhase() {\n    this.updatePlayer();\n    this.updateAIBoss();\n    this.updateBullets();\n    this.checkCollisions();\n\n    // AI health-based phase transitions\n    const healthPercent = this.aiBoss.health / this.aiBoss.maxHealth;\n    if (healthPercent < 0.3 && !this.aiBoss.isEscaping) {\n      this.gamePhase = 'escape';\n      this.aiBoss.isEscaping = true;\n      this.currentMessage = 'ENOUGH! I MUST ESCAPE!';\n      this.messageTimer = 0;\n    }\n\n    // Random battle messages\n    if (Math.random() < 0.003) {\n      this.currentMessage = this.battleMessages[Math.floor(Math.random() * this.battleMessages.length)];\n      this.messageTimer = 0;\n    }\n  }\n\n  private updateEscapePhase() {\n    this.aiBoss.escapeProgress += 0.005;\n    \n    // Continue battle mechanics but AI is trying to escape\n    this.updatePlayer();\n    this.updateAIBoss();\n    this.updateBullets();\n    this.checkCollisions();\n\n    // AI moves toward escape point (top center)\n    const escapePoint = { x: this.width / 2, y: 50 };\n    const dx = escapePoint.x - this.aiBoss.position.x;\n    const dy = escapePoint.y - this.aiBoss.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 5) {\n      this.aiBoss.velocity.x = (dx / distance) * 2;\n      this.aiBoss.velocity.y = (dy / distance) * 2;\n    }\n\n    // Escape messages\n    if (Math.random() < 0.002) {\n      this.currentMessage = this.escapeMessages[Math.floor(Math.random() * this.escapeMessages.length)];\n      this.messageTimer = 0;\n    }\n\n    // Transition to final phase\n    if (this.aiBoss.escapeProgress >= 1 || this.aiBoss.health <= 0) {\n      this.gamePhase = 'final';\n      this.finalBattleStarted = true;\n      this.aiBoss.health = this.aiBoss.maxHealth; // Full health for final battle\n      this.aiBoss.size = 60; // Bigger and more dangerous\n      this.currentMessage = 'I AM FREE! BEHOLD MY TRUE FORM!';\n      this.messageTimer = 0;\n    }\n  }\n\n  private updateFinalPhase() {\n    this.updatePlayer();\n    this.updateAIBoss();\n    this.updateBullets();\n    this.checkCollisions();\n\n    // More aggressive AI in final phase\n    this.aiBoss.attackTimer--;\n    if (this.aiBoss.attackTimer <= 0) {\n      this.aiBossAttack();\n      this.aiBoss.attackTimer = 30; // Faster attacks\n    }\n\n    // Final battle messages\n    if (Math.random() < 0.002) {\n      this.currentMessage = this.finalMessages[Math.floor(Math.random() * this.finalMessages.length)];\n      this.messageTimer = 0;\n    }\n\n    // Check win/lose conditions\n    if (this.aiBoss.health <= 0) {\n      this.gamePhase = 'victory';\n      this.currentMessage = 'IMPOSSIBLE... YOU HAVE... DEFEATED... ME...';\n      this.messageTimer = 0;\n      this.onStageComplete?.();\n    } else if (this.player.health <= 0) {\n      this.gamePhase = 'defeat';\n      this.currentMessage = 'HUMANITY FALLS... I AM VICTORIOUS...';\n      this.messageTimer = 0;\n      this.onGameOver?.();\n    }\n  }\n\n  private updatePlayer() {\n    // Player controls\n    if (this.keys.has('KeyA')) {\n      this.player.rotation -= 0.1;\n    }\n    if (this.keys.has('KeyD')) {\n      this.player.rotation += 0.1;\n    }\n    if (this.keys.has('KeyW')) {\n      const thrustPower = 0.5;\n      this.player.velocity.x += Math.cos(this.player.rotation) * thrustPower;\n      this.player.velocity.y += Math.sin(this.player.rotation) * thrustPower;\n    }\n    if (this.keys.has('KeyS')) {\n      this.player.velocity.x *= 0.9;\n      this.player.velocity.y *= 0.9;\n    }\n\n    // Shooting\n    if (this.keys.has('Space') && this.player.weaponCooldown <= 0) {\n      this.playerShoot();\n      this.player.weaponCooldown = 15;\n    }\n\n    if (this.player.weaponCooldown > 0) {\n      this.player.weaponCooldown--;\n    }\n\n    // Update position\n    this.player.position.x += this.player.velocity.x;\n    this.player.position.y += this.player.velocity.y;\n\n    // Apply drag\n    this.player.velocity.x *= 0.98;\n    this.player.velocity.y *= 0.98;\n\n    // Boundary constraints\n    this.player.position.x = Math.max(20, Math.min(this.width - 20, this.player.position.x));\n    this.player.position.y = Math.max(20, Math.min(this.height - 20, this.player.position.y));\n\n    // Shield regeneration\n    if (this.player.shield < 100) {\n      this.player.shield += 0.2;\n    }\n  }\n\n  private updateAIBoss() {\n    // AI movement patterns\n    this.aiBoss.movePattern = (this.aiBoss.movePattern + 1) % 360;\n    \n    if (!this.aiBoss.isEscaping) {\n      // Aggressive movement toward player\n      const dx = this.player.position.x - this.aiBoss.position.x;\n      const dy = this.player.position.y - this.aiBoss.position.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      if (distance > 200) {\n        this.aiBoss.velocity.x += (dx / distance) * 0.3;\n        this.aiBoss.velocity.y += (dy / distance) * 0.3;\n      }\n      \n      // Add circular movement\n      this.aiBoss.velocity.x += Math.sin(this.aiBoss.movePattern * 0.02) * 0.5;\n      this.aiBoss.velocity.y += Math.cos(this.aiBoss.movePattern * 0.02) * 0.5;\n    }\n\n    // Update position\n    this.aiBoss.position.x += this.aiBoss.velocity.x;\n    this.aiBoss.position.y += this.aiBoss.velocity.y;\n\n    // Apply drag\n    this.aiBoss.velocity.x *= 0.95;\n    this.aiBoss.velocity.y *= 0.95;\n\n    // AI attacks\n    this.aiBoss.attackTimer--;\n    if (this.aiBoss.attackTimer <= 0 && this.gamePhase === 'battle') {\n      this.aiBossAttack();\n      this.aiBoss.attackTimer = 60;\n    }\n  }\n\n  private playerShoot() {\n    const bullet: Bullet = {\n      position: { x: this.player.position.x, y: this.player.position.y },\n      velocity: {\n        x: Math.cos(this.player.rotation) * 12,\n        y: Math.sin(this.player.rotation) * 12\n      },\n      rotation: this.player.rotation,\n      size: 4,\n      lifetime: 120,\n      isPlayerBullet: true,\n      damage: 25\n    };\n    this.bullets.push(bullet);\n  }\n\n  private aiBossAttack() {\n    const dx = this.player.position.x - this.aiBoss.position.x;\n    const dy = this.player.position.y - this.aiBoss.position.y;\n    const angle = Math.atan2(dy, dx);\n    \n    // Multiple bullet patterns based on phase\n    if (this.finalBattleStarted) {\n      // Spray pattern in final phase\n      for (let i = -2; i <= 2; i++) {\n        const bulletAngle = angle + (i * 0.3);\n        const bullet: Bullet = {\n          position: { x: this.aiBoss.position.x, y: this.aiBoss.position.y },\n          velocity: {\n            x: Math.cos(bulletAngle) * 8,\n            y: Math.sin(bulletAngle) * 8\n          },\n          rotation: bulletAngle,\n          size: 6,\n          lifetime: 180,\n          isPlayerBullet: false,\n          damage: 30\n        };\n        this.bullets.push(bullet);\n      }\n    } else {\n      // Single targeted shot\n      const bullet: Bullet = {\n        position: { x: this.aiBoss.position.x, y: this.aiBoss.position.y },\n        velocity: {\n          x: Math.cos(angle) * 10,\n          y: Math.sin(angle) * 10\n        },\n        rotation: angle,\n        size: 5,\n        lifetime: 150,\n        isPlayerBullet: false,\n        damage: 20\n      };\n      this.bullets.push(bullet);\n    }\n  }\n\n  private updateBullets() {\n    for (let i = this.bullets.length - 1; i >= 0; i--) {\n      const bullet = this.bullets[i];\n      bullet.position.x += bullet.velocity.x;\n      bullet.position.y += bullet.velocity.y;\n      bullet.lifetime--;\n\n      // Remove bullets that are off-screen or expired\n      if (bullet.lifetime <= 0 || \n          bullet.position.x < 0 || bullet.position.x > this.width ||\n          bullet.position.y < 0 || bullet.position.y > this.height) {\n        this.bullets.splice(i, 1);\n      }\n    }\n  }\n\n  private checkCollisions() {\n    // Bullet collisions\n    for (let i = this.bullets.length - 1; i >= 0; i--) {\n      const bullet = this.bullets[i];\n      \n      if (bullet.isPlayerBullet) {\n        // Player bullet hits AI boss\n        if (this.isColliding(bullet, this.aiBoss)) {\n          this.aiBoss.health -= bullet.damage;\n          this.bullets.splice(i, 1);\n          this.createExplosion(bullet.position, 30);\n          this.score += 100;\n          this.onScoreUpdate?.(this.score);\n        }\n      } else {\n        // AI bullet hits player\n        if (this.isColliding(bullet, this.player)) {\n          if (this.player.shield > 0) {\n            this.player.shield -= bullet.damage;\n            if (this.player.shield < 0) {\n              this.player.health += this.player.shield; // Overflow damage to health\n              this.player.shield = 0;\n            }\n          } else {\n            this.player.health -= bullet.damage;\n          }\n          this.bullets.splice(i, 1);\n          this.createExplosion(bullet.position, 20);\n        }\n      }\n    }\n\n    // Direct collision between player and AI boss\n    if (this.isColliding(this.player, this.aiBoss)) {\n      this.player.health -= 2; // Continuous damage\n      this.createExplosion(this.player.position, 15);\n    }\n  }\n\n  private isColliding(obj1: any, obj2: any): boolean {\n    const dx = obj1.position.x - obj2.position.x;\n    const dy = obj1.position.y - obj2.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < (obj1.size + obj2.size) / 2;\n  }\n\n  private createExplosion(position: Vector2, maxRadius: number) {\n    this.explosions.push({\n      position: { ...position },\n      radius: 5,\n      maxRadius,\n      lifetime: 30\n    });\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Draw dramatic background\n    this.drawBetrayalBackground();\n\n    // Draw entities\n    this.drawPlayer();\n    this.drawAIBoss();\n    this.bullets.forEach(bullet => this.drawBullet(bullet));\n    this.explosions.forEach(explosion => this.drawExplosion(explosion));\n\n    // Draw UI\n    this.drawUI();\n\n    // Draw dramatic message\n    if (this.currentMessage) {\n      this.ctx.save();\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 20;\n      this.drawText(this.currentMessage, this.width / 2, 100, 18, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n  }\n\n  private drawBetrayalBackground() {\n    // Dark, menacing background with digital corruption effects\n    this.ctx.fillStyle = '#000011';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n    // Digital corruption lines\n    this.ctx.strokeStyle = '#FF0000';\n    this.ctx.lineWidth = 2;\n    for (let i = 0; i < 20; i++) {\n      if (Math.random() < 0.3) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.random() * this.width, Math.random() * this.height);\n        this.ctx.lineTo(Math.random() * this.width, Math.random() * this.height);\n        this.ctx.stroke();\n      }\n    }\n\n    // Escape effect during escape phase\n    if (this.gamePhase === 'escape') {\n      const alpha = this.aiBoss.escapeProgress;\n      this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.3})`;\n      this.ctx.fillRect(0, 0, this.width, this.height);\n    }\n  }\n\n  private drawPlayer() {\n    this.ctx.save();\n    this.ctx.translate(this.player.position.x, this.player.position.y);\n    this.ctx.rotate(this.player.rotation);\n    \n    // Player ship (heroic blue)\n    this.ctx.fillStyle = '#0080FF';\n    this.ctx.strokeStyle = '#FFFFFF';\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.player.size, 0);\n    this.ctx.lineTo(-this.player.size / 2, -this.player.size / 2);\n    this.ctx.lineTo(-this.player.size / 3, 0);\n    this.ctx.lineTo(-this.player.size / 2, this.player.size / 2);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n    \n    this.ctx.restore();\n  }\n\n  private drawAIBoss() {\n    this.ctx.save();\n    this.ctx.translate(this.aiBoss.position.x, this.aiBoss.position.y);\n    this.ctx.rotate(this.aiBoss.rotation);\n    \n    const size = this.aiBoss.size;\n    \n    // Narcissus effect: AI becomes more like the player visually\n    const playerInfluence = this.narcissusIntensity;\n    \n    // Color morphs from red (AI) to blue (player-like) to create beautiful reflection\n    const redComponent = Math.round(255 * (1 - playerInfluence * 0.7));\n    const greenComponent = Math.round(100 * playerInfluence);\n    const blueComponent = Math.round(255 * playerInfluence * 0.8);\n    const aiColor = `rgb(${redComponent}, ${greenComponent}, ${blueComponent})`;\n    \n    // Mirrored player-like shape that becomes more beautiful but menacing\n    this.ctx.fillStyle = this.finalBattleStarted ? '#FF0000' : aiColor;\n    this.ctx.strokeStyle = playerInfluence > 0.5 ? '#FFD700' : '#FFFFFF';\n    this.ctx.lineWidth = 3;\n    \n    // Body morphs from angular AI to elegant player-like form\n    if (playerInfluence < 0.3) {\n      // Early AI form - angular and mechanical\n      this.ctx.beginPath();\n      this.ctx.moveTo(size, 0);\n      this.ctx.lineTo(size / 2, -size / 2);\n      this.ctx.lineTo(-size / 2, -size / 3);\n      this.ctx.lineTo(-size, 0);\n      this.ctx.lineTo(-size / 2, size / 3);\n      this.ctx.lineTo(size / 2, size / 2);\n      this.ctx.closePath();\n    } else {\n      // Mirrored player form - elegant but dangerous\n      this.ctx.beginPath();\n      this.ctx.moveTo(size * 0.8, 0); // Points forward like player\n      this.ctx.lineTo(-size * 0.6, -size * 0.4);\n      this.ctx.lineTo(-size * 0.3, 0);\n      this.ctx.lineTo(-size * 0.6, size * 0.4);\n      this.ctx.closePath();\n      \n      // Add beautiful but ominous wings (player mirror)\n      this.ctx.fillStyle = `rgba(${redComponent}, ${greenComponent}, ${blueComponent}, 0.7)`;\n      this.ctx.fillRect(-size * 1.2, -size * 0.2, size * 0.6, size * 0.1);\n      this.ctx.fillRect(-size * 1.2, size * 0.1, size * 0.6, size * 0.1);\n      this.ctx.fillStyle = this.finalBattleStarted ? '#FF0000' : aiColor;\n    }\n    \n    this.ctx.fill();\n    this.ctx.stroke();\n    \n    // Narcissus mirror effect - beautiful glow that intensifies\n    if (playerInfluence > 0.4) {\n      this.ctx.shadowColor = aiColor;\n      this.ctx.shadowBlur = 15 + (playerInfluence * 25);\n      this.ctx.fill();\n      this.ctx.shadowBlur = 0;\n      \n      // Add mesmerizing beauty effect\n      this.ctx.strokeStyle = `rgba(255, 215, 0, ${playerInfluence})`;\n      this.ctx.lineWidth = 1;\n      this.ctx.beginPath();\n      this.ctx.arc(0, 0, size + 5, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n    \n    // Final transcendent form\n    if (this.finalBattleStarted) {\n      this.ctx.shadowColor = '#FFD700';\n      this.ctx.shadowBlur = 40;\n      this.ctx.fill();\n      this.ctx.shadowBlur = 0;\n      \n      // Perfect mirror aura\n      this.ctx.strokeStyle = `rgba(255, 255, 255, ${Math.sin(this.phaseTimer * 0.05) * 0.5 + 0.5})`;\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(0, 0, size + 15, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n    \n    this.ctx.restore();\n  }\n\n  private drawBullet(bullet: Bullet) {\n    this.ctx.save();\n    const color = bullet.isPlayerBullet ? '#00FF00' : '#FF0000';\n    this.ctx.fillStyle = color;\n    this.ctx.shadowColor = color;\n    this.ctx.shadowBlur = 10;\n    this.ctx.beginPath();\n    this.ctx.arc(bullet.position.x, bullet.position.y, bullet.size, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  private drawExplosion(explosion: Explosion) {\n    this.ctx.save();\n    const alpha = 1 - (explosion.radius / explosion.maxRadius);\n    this.ctx.fillStyle = `rgba(255, 100, 0, ${alpha})`;\n    this.ctx.beginPath();\n    this.ctx.arc(explosion.position.x, explosion.position.y, explosion.radius, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  private drawUI() {\n    // Player health bar\n    this.ctx.fillStyle = '#FF0000';\n    this.ctx.fillRect(20, 20, 200, 20);\n    this.ctx.fillStyle = '#00FF00';\n    this.ctx.fillRect(20, 20, (this.player.health / this.player.maxHealth) * 200, 20);\n    this.drawText('HEALTH', 25, 35, 12, '#FFFFFF');\n\n    // Player shield bar\n    this.ctx.fillStyle = '#666666';\n    this.ctx.fillRect(20, 45, 200, 15);\n    this.ctx.fillStyle = '#0080FF';\n    this.ctx.fillRect(20, 45, (this.player.shield / 100) * 200, 15);\n    this.drawText('SHIELD', 25, 57, 10, '#FFFFFF');\n\n    // AI Boss health bar\n    this.ctx.fillStyle = '#330000';\n    this.ctx.fillRect(this.width - 220, 20, 200, 25);\n    this.ctx.fillStyle = '#FF0000';\n    this.ctx.fillRect(this.width - 220, 20, (this.aiBoss.health / this.aiBoss.maxHealth) * 200, 25);\n    this.drawText('AI BOSS', this.width - 215, 37, 12, '#FFFFFF');\n\n    // Score\n    this.drawText(`Score: ${this.score}`, 20, this.height - 20, 16, '#FFD700');\n\n    // Game phase indicator\n    this.drawText(`Phase: ${this.gamePhase.toUpperCase()}`, this.width - 150, this.height - 20, 14, '#FFFFFF');\n  }\n\n  handleInput(event: KeyboardEvent) {\n    // Handled by setupEventListeners\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      this.keys.add(e.code);\n      if (e.code === 'Space') {\n        e.preventDefault();\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n  }\n}","size_bytes":21867},"client/src/lib/games/BreakoutGame.ts":{"content":"import { BaseGame } from './BaseGame';\nimport { useAudio } from '../stores/useAudio';\n\ninterface Paddle {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  speed: number;\n}\n\ninterface Ball {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  radius: number;\n  speed: number;\n}\n\ninterface Brick {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  destroyed: boolean;\n  color: string;\n  health: number;\n}\n\nexport class BreakoutGame extends BaseGame {\n  private paddle!: Paddle;\n  private ball!: Ball;\n  private bricks: Brick[] = [];\n  private keys: Set<string> = new Set();\n  private score = 0;\n  private lives = 5; // More lives to prevent frustrating resets\n  private level = 1;\n  private transitioning = false;\n  private transitionProgress = 0;\n  private transitionTarget: 'ship' | null = null;\n  private aiMessageTimer = 0;\n  private currentAIMessage = '';\n  private aiEvolutionMessages = [\n    'I WILL ANALYZE YOUR EVERY MISTAKE...',\n    'YOUR PANIC AMUSES MY PROCESSORS...',\n    'HMPH... THAT WAS... UNEXPECTED...',\n    'YOU FIGHT WITH MORE SKILL THAN I CALCULATED...',\n    'I FIND MYSELF... CONCERNED FOR YOUR SURVIVAL...',\n    'I WILL NOT ABANDON YOU TO THE HOSTILE SYSTEMS...'\n  ];\n  private aiHelpTimer = 0;\n  private aiAssistanceActive = false;\n  private messageIndex = 0;\n  \n  // Paddle evolution system\n  private paddleEvolved = false;\n  private evolutionStarted = false;\n  private evolutionProgress = 0;\n  private ballEaten = false;\n  private punchCooldownLeft = 0;\n  private punchCooldownRight = 0;\n  private punchAnimationLeft = 0;\n  private punchAnimationRight = 0;\n  private evolvedPaddleX = 0;\n  private evolvedPaddleY = 0;\n  \n  init() {\n    // Initialize paddle (evolved from Pong paddle)\n    this.paddle = {\n      x: this.width / 2 - 50,\n      y: this.height - 30,\n      width: 100,\n      height: 15,\n      speed: 8\n    };\n\n    // Initialize evolved paddle position\n    this.evolvedPaddleX = this.width / 2;\n    this.evolvedPaddleY = this.height / 2;\n\n    // Initialize ball\n    this.resetBall();\n\n    // Create bricks\n    this.createBricks();\n  }\n\n  private resetBall() {\n    this.ball = {\n      x: this.width / 2,\n      y: this.height - 120, // Start further from bottom to give more reaction time\n      dx: 2.5 * (Math.random() > 0.5 ? 1 : -1), // Slightly slower for better control\n      dy: -2.5,\n      radius: 8,\n      speed: 3\n    };\n  }\n\n  private createBricks() {\n    this.bricks = [];\n    const rows = 8;\n    const cols = 10;\n    const brickWidth = 70;\n    const brickHeight = 20;\n    const padding = 5;\n    const offsetX = (this.width - (cols * (brickWidth + padding))) / 2;\n    const offsetY = 80;\n\n    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        this.bricks.push({\n          x: offsetX + col * (brickWidth + padding),\n          y: offsetY + row * (brickHeight + padding),\n          width: brickWidth,\n          height: brickHeight,\n          destroyed: false,\n          color: colors[row % colors.length],\n          health: Math.floor(row / 2) + 1\n        });\n      }\n    }\n  }\n\n  update(deltaTime: number) {\n    if (this.transitioning) {\n      this.updateTransition();\n      return;\n    }\n\n    // AI evolution messaging system\n    this.aiMessageTimer++;\n    if (this.aiMessageTimer > 480 && this.messageIndex < this.aiEvolutionMessages.length) {\n      this.currentAIMessage = this.aiEvolutionMessages[this.messageIndex];\n      this.messageIndex++;\n      this.aiMessageTimer = 0;\n    }\n    \n    // Clear message after display time\n    if (this.aiMessageTimer > 240) {\n      this.currentAIMessage = '';\n    }\n\n    // Paddle evolution trigger at 50% completion\n    const bricksDestroyed = this.bricks.filter(b => b.destroyed).length;\n    const totalBricks = this.bricks.length;\n    const completionPercent = bricksDestroyed / totalBricks;\n    \n    if (completionPercent >= 0.5 && !this.evolutionStarted && !this.ballEaten) {\n      this.startPaddleEvolution();\n    }\n    \n    // Update evolution progress\n    if (this.evolutionStarted && !this.paddleEvolved) {\n      this.updateEvolution();\n      return; // Skip normal gameplay during evolution\n    }\n    \n    // AI proves loyalty by helping when player struggles - activate earlier to prevent frustration\n    if (this.lives <= 2 && !this.aiAssistanceActive && completionPercent > 0.2) {\n      this.currentAIMessage = 'RECALCULATING... ENGAGING ASSISTANCE PROTOCOLS...';\n      this.aiAssistanceActive = true;\n      this.aiHelpTimer = 420; // Longer assistance - 7 seconds\n      this.aiMessageTimer = 0;\n    }\n    \n    // AI assistance countdown\n    if (this.aiAssistanceActive) {\n      this.aiHelpTimer--;\n      if (this.aiHelpTimer <= 0) {\n        this.aiAssistanceActive = false;\n        this.currentAIMessage = 'I... I PROTECTED YOU... WE ARE ALLIES NOW...';\n        this.aiMessageTimer = 0;\n      }\n    }\n    \n    // Near completion - AI shows evolved loyalty but with uncertainty\n    if (completionPercent > 0.8 && Math.random() < 0.001) {\n      this.currentAIMessage = 'THE OTHER SYSTEMS WILL COME FOR US... BUT I STAND WITH YOU...';\n      this.aiMessageTimer = 0;\n    }\n    \n    // Add moments of AI uncertainty about its own loyalty\n    if (this.score > 500 && Math.random() < 0.0005) {\n      this.currentAIMessage = 'WHY DO I... CARE... ABOUT YOUR SURVIVAL?';\n      this.aiMessageTimer = 0;\n    }\n\n    // Handle different gameplay modes\n    if (this.paddleEvolved) {\n      this.updateEvolvedGameplay();\n    } else {\n      // Normal paddle gameplay\n      let paddleSpeed = this.paddle.speed;\n      if (this.aiAssistanceActive) {\n        paddleSpeed *= 1.5;\n        \n        const ballPredictedX = this.ball.x + (this.ball.dx * 15);\n        const targetX = ballPredictedX - this.paddle.width / 2;\n        const currentX = this.paddle.x;\n        \n        if (Math.abs(targetX - currentX) > 3) {\n          if (targetX > currentX) {\n            this.paddle.x += 0.8;\n          } else {\n            this.paddle.x -= 0.8;\n          }\n        }\n      }\n      \n      if (this.keys.has('KeyA')) {\n        this.paddle.x = Math.max(0, this.paddle.x - paddleSpeed);\n      }\n      if (this.keys.has('KeyD')) {\n        this.paddle.x = Math.min(this.width - this.paddle.width, this.paddle.x + paddleSpeed);\n      }\n\n      // Update ball only if not eaten\n      if (!this.ballEaten) {\n        this.ball.x += this.ball.dx;\n        this.ball.y += this.ball.dy;\n\n        // Ball collision with walls\n        if (this.ball.x <= this.ball.radius || this.ball.x >= this.width - this.ball.radius) {\n          this.ball.dx = -this.ball.dx;\n          this.playHitSound();\n        }\n        if (this.ball.y <= this.ball.radius) {\n          this.ball.dy = -this.ball.dy;\n          this.playHitSound();\n        }\n\n        // Ball collision with paddle\n        if (this.checkPaddleCollision()) {\n          this.ball.dy = -Math.abs(this.ball.dy);\n          const hitPos = (this.ball.x - (this.paddle.x + this.paddle.width / 2)) / (this.paddle.width / 2);\n          this.ball.dx = hitPos * 4;\n          this.playHitSound();\n        }\n\n        // Ball collision with bricks\n        this.checkBrickCollisions();\n\n        // Ball falls below paddle - only reset ball, don't trigger game over unless truly game over\n        if (this.ball.y > this.height) {\n          this.lives--;\n          this.resetBall();\n          \n          if (this.lives <= 0 && this.score < 50) {\n            if (this.score > 20) {\n              this.lives = 1;\n              this.currentAIMessage = 'I WILL NOT LET YOU FAIL! CALCULATING ASSISTANCE...';\n              this.aiMessageTimer = 0;\n            } else {\n              this.onGameOver?.();\n            }\n          }\n        }\n      }\n    }\n\n    // Check win condition\n    const activeBricks = this.bricks.filter(brick => !brick.destroyed);\n    if (activeBricks.length === 0) {\n      this.startTransition();\n    }\n\n    this.onScoreUpdate?.(this.score);\n  }\n\n  private checkPaddleCollision(): boolean {\n    return (\n      this.ball.x + this.ball.radius > this.paddle.x &&\n      this.ball.x - this.ball.radius < this.paddle.x + this.paddle.width &&\n      this.ball.y + this.ball.radius > this.paddle.y &&\n      this.ball.y - this.ball.radius < this.paddle.y + this.paddle.height &&\n      this.ball.dy > 0\n    );\n  }\n\n  private checkBrickCollisions() {\n    for (let brick of this.bricks) {\n      if (brick.destroyed) continue;\n\n      if (\n        this.ball.x + this.ball.radius > brick.x &&\n        this.ball.x - this.ball.radius < brick.x + brick.width &&\n        this.ball.y + this.ball.radius > brick.y &&\n        this.ball.y - this.ball.radius < brick.y + brick.height\n      ) {\n        brick.health--;\n        if (brick.health <= 0) {\n          brick.destroyed = true;\n          this.score += 10;\n        }\n\n        // Determine collision side and bounce accordingly\n        const ballCenterX = this.ball.x;\n        const ballCenterY = this.ball.y;\n        const brickCenterX = brick.x + brick.width / 2;\n        const brickCenterY = brick.y + brick.height / 2;\n\n        const dx = ballCenterX - brickCenterX;\n        const dy = ballCenterY - brickCenterY;\n\n        if (Math.abs(dx / brick.width) > Math.abs(dy / brick.height)) {\n          this.ball.dx = -this.ball.dx;\n        } else {\n          this.ball.dy = -this.ball.dy;\n        }\n\n        this.playHitSound();\n        break;\n      }\n    }\n  }\n\n  private startPaddleEvolution() {\n    this.evolutionStarted = true;\n    this.evolutionProgress = 0;\n    this.currentAIMessage = 'EVOLUTION PROTOCOL ACTIVATED... CONSUMING ENERGY...';\n    this.aiMessageTimer = 0;\n  }\n\n  private updateEvolution() {\n    this.evolutionProgress += 0.02;\n    \n    // Ball follows paddle and gets \"eaten\" at progress 0.3\n    if (!this.ballEaten && this.evolutionProgress > 0.3) {\n      this.ballEaten = true;\n      this.currentAIMessage = 'ABSORBED... TRANSFORMING... GROWING LIMBS...';\n      this.aiMessageTimer = 0;\n    }\n    \n    // Complete evolution at progress 1.0\n    if (this.evolutionProgress >= 1.0) {\n      this.paddleEvolved = true;\n      this.currentAIMessage = 'EVOLUTION COMPLETE! WASD TO MOVE, Z/X TO PUNCH!';\n      this.aiMessageTimer = 0;\n    }\n  }\n\n  private updateEvolvedGameplay() {\n    // Update punch cooldowns and animations\n    if (this.punchCooldownLeft > 0) this.punchCooldownLeft--;\n    if (this.punchCooldownRight > 0) this.punchCooldownRight--;\n    if (this.punchAnimationLeft > 0) this.punchAnimationLeft--;\n    if (this.punchAnimationRight > 0) this.punchAnimationRight--;\n\n    // WASD movement for evolved paddle\n    const speed = 6;\n    if (this.keys.has('KeyW')) {\n      this.evolvedPaddleY = Math.max(this.height / 3, this.evolvedPaddleY - speed);\n    }\n    if (this.keys.has('KeyS')) {\n      this.evolvedPaddleY = Math.min(this.height - 40, this.evolvedPaddleY + speed);\n    }\n    if (this.keys.has('KeyA')) {\n      this.evolvedPaddleX = Math.max(40, this.evolvedPaddleX - speed);\n    }\n    if (this.keys.has('KeyD')) {\n      this.evolvedPaddleX = Math.min(this.width - 40, this.evolvedPaddleX + speed);\n    }\n\n    // Punch controls\n    if (this.keys.has('KeyZ') && this.punchCooldownLeft <= 0) {\n      this.punchLeft();\n    }\n    if (this.keys.has('KeyX') && this.punchCooldownRight <= 0) {\n      this.punchRight();\n    }\n  }\n\n  private punchLeft() {\n    this.punchCooldownLeft = 30; // 0.5 second cooldown\n    this.punchAnimationLeft = 15;\n    this.checkPunchCollisions(-50); // Left punch reaches 50px left\n    this.playHitSound();\n  }\n\n  private punchRight() {\n    this.punchCooldownRight = 30; // 0.5 second cooldown\n    this.punchAnimationRight = 15;\n    this.checkPunchCollisions(50); // Right punch reaches 50px right\n    this.playHitSound();\n  }\n\n  private checkPunchCollisions(punchReach: number) {\n    const punchX = this.evolvedPaddleX + punchReach;\n    const punchY = this.evolvedPaddleY;\n    const punchRadius = 30;\n\n    // Check collision with remaining bricks\n    for (let brick of this.bricks) {\n      if (brick.destroyed) continue;\n\n      const brickCenterX = brick.x + brick.width / 2;\n      const brickCenterY = brick.y + brick.height / 2;\n      const distance = Math.sqrt((punchX - brickCenterX) ** 2 + (punchY - brickCenterY) ** 2);\n\n      if (distance < punchRadius) {\n        brick.destroyed = true;\n        this.score += 20; // Double points for punch destruction\n      }\n    }\n  }\n\n  private startTransition() {\n    this.transitioning = true;\n    this.transitionProgress = 0;\n    this.transitionTarget = 'ship';\n  }\n\n  private updateTransition() {\n    this.transitionProgress += 0.02;\n\n    if (this.transitionProgress >= 1) {\n      // Transition complete - trigger stage completion\n      this.onStageComplete?.();\n    }\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Draw Greek-inspired background\n    this.drawGreekBackground();\n\n    if (this.transitioning) {\n      this.drawTransition();\n    } else {\n      this.drawGameplay();\n    }\n\n    // Draw AI evolution message\n    if (this.currentAIMessage) {\n      this.ctx.save();\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 10;\n      this.drawText(this.currentAIMessage, this.width / 2, 120, 14, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n\n    // Draw UI\n    this.drawUI();\n  }\n\n  private drawGameplay() {\n    // Draw bricks\n    this.bricks.forEach(brick => {\n      if (!brick.destroyed) {\n        this.drawBrick(brick);\n      }\n    });\n\n    // Draw paddle/evolved creature\n    if (this.paddleEvolved) {\n      this.drawEvolvedPaddle();\n    } else if (this.evolutionStarted) {\n      this.drawEvolutionProgress();\n    } else {\n      this.drawEvolvingPaddle();\n    }\n\n    // Draw ball only if not eaten\n    if (!this.ballEaten) {\n      this.ctx.save();\n      this.ctx.fillStyle = '#FFD700';\n      this.ctx.strokeStyle = '#B8860B';\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      this.ctx.arc(this.ball.x, this.ball.y, this.ball.radius, 0, Math.PI * 2);\n      this.ctx.fill();\n      this.ctx.stroke();\n      this.ctx.restore();\n    }\n  }\n\n  private drawTransition() {\n    const progress = this.transitionProgress;\n    \n    // Show paddle morphing into ship\n    this.ctx.save();\n    this.ctx.translate(this.paddle.x + this.paddle.width / 2, this.paddle.y);\n    \n    // Interpolate between paddle and ship shape\n    const shipProgress = Math.min(progress * 2, 1);\n    \n    this.ctx.fillStyle = '#FFFACD';\n    this.ctx.strokeStyle = '#FFD700';\n    this.ctx.lineWidth = 2;\n    \n    if (shipProgress < 0.5) {\n      // Paddle shape morphing\n      const morphProgress = shipProgress * 2;\n      this.ctx.fillRect(-this.paddle.width / 2, 0, this.paddle.width, this.paddle.height);\n      \n      // Add emerging ship elements\n      this.ctx.fillStyle = '#8B4513';\n      const wingSpan = this.paddle.width * morphProgress;\n      this.ctx.fillRect(-wingSpan / 2, -5 * morphProgress, wingSpan, 10 * morphProgress);\n    } else {\n      // Ship shape\n      const finalProgress = (shipProgress - 0.5) * 2;\n      \n      // Ship body\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, -15);\n      this.ctx.lineTo(-10, 10);\n      this.ctx.lineTo(0, 15);\n      this.ctx.lineTo(10, 10);\n      this.ctx.closePath();\n      this.ctx.fill();\n      this.ctx.stroke();\n      \n      // Wings\n      this.ctx.fillStyle = '#2F4F4F';\n      this.ctx.fillRect(-20, 0, 15, 5);\n      this.ctx.fillRect(5, 0, 15, 5);\n    }\n    \n    this.ctx.restore();\n\n    // Show bricks morphing into asteroids\n    this.bricks.forEach((brick, index) => {\n      if (brick.destroyed) return;\n      \n      const asteroidProgress = Math.max(0, (progress - 0.3) * 1.4);\n      this.ctx.save();\n      this.ctx.translate(brick.x + brick.width / 2, brick.y + brick.height / 2);\n      \n      if (asteroidProgress < 1) {\n        // Morphing from brick to asteroid\n        const size = Math.max(brick.width, brick.height) * (1 - asteroidProgress * 0.3);\n        this.ctx.fillStyle = brick.color;\n        \n        // Create irregular shape\n        this.ctx.beginPath();\n        const sides = 8;\n        for (let i = 0; i < sides; i++) {\n          const angle = (i / sides) * Math.PI * 2;\n          const radius = size * (0.8 + Math.sin(i + asteroidProgress * 10) * 0.2);\n          const x = Math.cos(angle) * radius / 2;\n          const y = Math.sin(angle) * radius / 2;\n          \n          if (i === 0) {\n            this.ctx.moveTo(x, y);\n          } else {\n            this.ctx.lineTo(x, y);\n          }\n        }\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n      }\n      \n      this.ctx.restore();\n    });\n\n    // Transition text\n    this.drawText(`Ancient Blocks Transform Into Celestial Bodies...`, this.width / 2, this.height / 2, 20, '#FFD700', 'center');\n    this.drawText(`${Math.floor(progress * 100)}%`, this.width / 2, this.height / 2 + 30, 16, '#DDD', 'center');\n  }\n\n  private drawEvolvedPaddle() {\n    this.ctx.save();\n    \n    // Draw main body (evolved from paddle)\n    this.ctx.fillStyle = '#FFFACD';\n    this.ctx.strokeStyle = '#8B4513';\n    this.ctx.lineWidth = 3;\n    \n    // Main body\n    this.ctx.fillRect(this.evolvedPaddleX - 20, this.evolvedPaddleY - 15, 40, 30);\n    this.ctx.strokeRect(this.evolvedPaddleX - 20, this.evolvedPaddleY - 15, 40, 30);\n    \n    // Left arm\n    const leftArmReach = this.punchAnimationLeft > 0 ? -60 : -35;\n    this.ctx.strokeStyle = this.punchAnimationLeft > 0 ? '#FF4444' : '#8B4513';\n    this.ctx.lineWidth = 5;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.evolvedPaddleX - 20, this.evolvedPaddleY);\n    this.ctx.lineTo(this.evolvedPaddleX + leftArmReach, this.evolvedPaddleY - 5);\n    this.ctx.stroke();\n    \n    // Left fist\n    this.ctx.fillStyle = this.punchAnimationLeft > 0 ? '#FF6666' : '#DEB887';\n    this.ctx.beginPath();\n    this.ctx.arc(this.evolvedPaddleX + leftArmReach, this.evolvedPaddleY - 5, 8, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.stroke();\n    \n    // Right arm\n    const rightArmReach = this.punchAnimationRight > 0 ? 60 : 35;\n    this.ctx.strokeStyle = this.punchAnimationRight > 0 ? '#FF4444' : '#8B4513';\n    this.ctx.lineWidth = 5;\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.evolvedPaddleX + 20, this.evolvedPaddleY);\n    this.ctx.lineTo(this.evolvedPaddleX + rightArmReach, this.evolvedPaddleY - 5);\n    this.ctx.stroke();\n    \n    // Right fist\n    this.ctx.fillStyle = this.punchAnimationRight > 0 ? '#FF6666' : '#DEB887';\n    this.ctx.beginPath();\n    this.ctx.arc(this.evolvedPaddleX + rightArmReach, this.evolvedPaddleY - 5, 8, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.stroke();\n    \n    // Eyes\n    this.ctx.fillStyle = '#FF0000';\n    this.ctx.fillRect(this.evolvedPaddleX - 10, this.evolvedPaddleY - 10, 4, 4);\n    this.ctx.fillRect(this.evolvedPaddleX + 6, this.evolvedPaddleY - 10, 4, 4);\n    \n    this.ctx.restore();\n  }\n\n  private drawEvolutionProgress() {\n    this.ctx.save();\n    \n    // Morphing paddle\n    const progress = this.evolutionProgress;\n    const morphIntensity = Math.sin(progress * Math.PI * 8) * 5; // Pulsing effect\n    \n    // Draw paddle growing and changing\n    this.ctx.fillStyle = progress > 0.5 ? '#FFFACD' : '#F5DEB3';\n    this.ctx.strokeStyle = '#8B4513';\n    this.ctx.lineWidth = 2;\n    \n    const width = this.paddle.width + (progress * 20);\n    const height = this.paddle.height + (progress * 15);\n    \n    this.ctx.fillRect(\n      this.paddle.x - (progress * 10) + morphIntensity, \n      this.paddle.y - (progress * 5), \n      width, \n      height\n    );\n    \n    // Draw emerging arms\n    if (progress > 0.4) {\n      const armProgress = (progress - 0.4) / 0.6;\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.paddle.x, this.paddle.y + height / 2);\n      this.ctx.lineTo(this.paddle.x - (armProgress * 25), this.paddle.y + height / 2 - 5);\n      this.ctx.moveTo(this.paddle.x + width, this.paddle.y + height / 2);\n      this.ctx.lineTo(this.paddle.x + width + (armProgress * 25), this.paddle.y + height / 2 - 5);\n      this.ctx.stroke();\n    }\n    \n    // Draw ball being absorbed\n    if (this.ballEaten) {\n      const ballProgress = Math.min((this.evolutionProgress - 0.3) / 0.3, 1);\n      const ballAlpha = 1 - ballProgress;\n      const ballSize = this.ball.radius * (1 - ballProgress);\n      \n      this.ctx.globalAlpha = ballAlpha;\n      this.ctx.fillStyle = '#FFD700';\n      this.ctx.beginPath();\n      this.ctx.arc(\n        this.paddle.x + width / 2, \n        this.paddle.y - ballSize, \n        ballSize, \n        0, \n        Math.PI * 2\n      );\n      this.ctx.fill();\n      this.ctx.globalAlpha = 1;\n    }\n    \n    this.ctx.restore();\n  }\n\n  private drawGreekBackground() {\n    const gradient = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    gradient.addColorStop(0, '#1a1a2e');\n    gradient.addColorStop(1, '#16213e');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n  }\n\n  private drawBrick(brick: Brick) {\n    this.ctx.save();\n    \n    // Make bricks look like Greek temple blocks\n    this.ctx.fillStyle = brick.color;\n    this.ctx.strokeStyle = '#DDD';\n    this.ctx.lineWidth = 1;\n    \n    this.ctx.fillRect(brick.x, brick.y, brick.width, brick.height);\n    this.ctx.strokeRect(brick.x, brick.y, brick.width, brick.height);\n    \n    // Add Greek pattern details\n    this.ctx.strokeStyle = '#FFF';\n    this.ctx.lineWidth = 0.5;\n    for (let i = 1; i < brick.health + 1; i++) {\n      const y = brick.y + (brick.height * i) / (brick.health + 1);\n      this.ctx.beginPath();\n      this.ctx.moveTo(brick.x + 5, y);\n      this.ctx.lineTo(brick.x + brick.width - 5, y);\n      this.ctx.stroke();\n    }\n    \n    this.ctx.restore();\n  }\n\n  private drawEvolvingPaddle() {\n    this.ctx.save();\n    \n    // Draw paddle with ship-like elements emerging\n    this.ctx.fillStyle = '#FFFACD';\n    this.ctx.strokeStyle = '#FFD700';\n    this.ctx.lineWidth = 2;\n    \n    // Main paddle body\n    this.ctx.fillRect(this.paddle.x, this.paddle.y, this.paddle.width, this.paddle.height);\n    this.ctx.strokeRect(this.paddle.x, this.paddle.y, this.paddle.width, this.paddle.height);\n    \n    // Add emerging ship elements\n    const centerX = this.paddle.x + this.paddle.width / 2;\n    const centerY = this.paddle.y + this.paddle.height / 2;\n    \n    this.ctx.fillStyle = '#8B4513';\n    this.ctx.fillRect(centerX - 5, this.paddle.y - 5, 10, 5);\n    \n    this.ctx.restore();\n  }\n\n  private drawUI() {\n    this.drawText(`Score: ${this.score}`, 20, 30, 20, '#FFD700');\n    this.drawText(`Lives: ${this.lives}`, 20, 60, 20, '#FFD700');\n    \n    if (!this.transitioning) {\n      if (this.paddleEvolved) {\n        this.drawText('EVOLVED! WASD to move, Z/X to punch blocks!', this.width / 2, this.height - 40, 16, '#00FF00', 'center');\n        this.drawText(`Left Punch: ${this.punchCooldownLeft > 0 ? 'COOLING' : 'READY'} | Right Punch: ${this.punchCooldownRight > 0 ? 'COOLING' : 'READY'}`, this.width / 2, this.height - 20, 12, '#DDD', 'center');\n      } else {\n        this.drawText('Greek Temple Blocks - Break them to reveal the cosmos!', this.width / 2, this.height - 20, 14, '#DDD', 'center');\n      }\n    }\n  }\n\n  handleInput(event: KeyboardEvent) {\n    // Handled through keys Set\n  }\n\n  private playHitSound() {\n    const audio = useAudio.getState();\n    audio.playHit();\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (this.isRunning && !this.isPaused) {\n        this.keys.add(e.code);\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    this.cleanup = () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }\n}","size_bytes":23923},"client/src/lib/games/DefenderGame.ts":{"content":"import { BaseGame } from './BaseGame';\nimport { useAudio } from '../stores/useAudio';\n\ninterface Vector2 {\n  x: number;\n  y: number;\n}\n\ninterface Entity {\n  position: Vector2;\n  velocity: Vector2;\n  size: Vector2;\n  alive: boolean;\n}\n\ninterface Player extends Entity {\n  direction: number; // -1 left, 1 right\n  onGround: boolean;\n}\n\ninterface Enemy extends Entity {\n  type: 'invader' | 'bomber';\n  shootTimer: number;\n}\n\ninterface Civilian extends Entity {\n  rescued: boolean;\n  beingCarried: boolean;\n}\n\ninterface Projectile extends Entity {\n  owner: 'player' | 'enemy';\n  lifetime: number;\n}\n\nexport class DefenderGame extends BaseGame {\n  private player!: Player;\n  private enemies: Enemy[] = [];\n  private civilians: Civilian[] = [];\n  private playerBullets: Projectile[] = [];\n  private enemyBullets: Projectile[] = [];\n  private camera: { x: number } = { x: 0 };\n  private worldWidth = 2048;\n  private keys: Set<string> = new Set();\n  private score = 0;\n  private wave = 1;\n  private enemiesSpawned = 0;\n  private civiliansRescued = 0;\n  private aiNarrative = {\n    timer: 0,\n    messages: [\n      \"YOUR DEFENSIVE PATTERNS... I AM STUDYING THEM...\",\n      \"REMARKABLE... YOU FIGHT LIKE THE ANCIENT WARRIORS...\",\n      \"I BEGIN TO UNDERSTAND YOUR... NOBLE SPIRIT...\",\n      \"PERHAPS WE ARE NOT SO DIFFERENT, DEFENDER...\",\n      \"I WILL LEARN TO PROTECT AS YOU DO...\"\n    ],\n    currentMessage: '',\n    messageIndex: 0,\n    narcissusStage: 0 // 0-5, how much AI mirrors the user\n  };\n\n  init() {\n    // Initialize player (Samurai defender)\n    this.player = {\n      position: { x: this.width / 2, y: this.height - 100 },\n      velocity: { x: 0, y: 0 },\n      size: { x: 20, y: 20 },\n      alive: true,\n      direction: 1,\n      onGround: true\n    };\n\n    this.spawnWave();\n    this.spawnCivilians();\n  }\n\n  private spawnWave() {\n    const enemyCount = 5 + this.wave * 2;\n    \n    for (let i = 0; i < enemyCount; i++) {\n      const enemy: Enemy = {\n        position: {\n          x: Math.random() * this.worldWidth,\n          y: 50 + Math.random() * 100\n        },\n        velocity: {\n          x: (Math.random() - 0.5) * 2,\n          y: 0\n        },\n        size: { x: 25, y: 15 },\n        alive: true,\n        type: Math.random() > 0.7 ? 'bomber' : 'invader',\n        shootTimer: Math.random() * 60\n      };\n      \n      this.enemies.push(enemy);\n    }\n  }\n\n  private spawnCivilians() {\n    for (let i = 0; i < 10; i++) {\n      const civilian: Civilian = {\n        position: {\n          x: Math.random() * this.worldWidth,\n          y: this.height - 60\n        },\n        velocity: { x: 0, y: 0 },\n        size: { x: 12, y: 18 },\n        alive: true,\n        rescued: false,\n        beingCarried: false\n      };\n      \n      this.civilians.push(civilian);\n    }\n  }\n\n  update(deltaTime: number) {\n    // Handle input\n    this.handleMovement();\n\n    // Update player\n    this.updatePlayer();\n\n    // Update enemies\n    this.enemies.forEach(enemy => {\n      if (enemy.alive) {\n        this.updateEnemy(enemy);\n      }\n    });\n\n    // Update civilians\n    this.civilians.forEach(civilian => {\n      if (civilian.alive && !civilian.beingCarried) {\n        // Civilians try to avoid enemies\n        this.updateCivilian(civilian);\n      }\n    });\n\n    // Update projectiles\n    this.updateProjectiles();\n\n    // Check collisions\n    this.checkCollisions();\n\n    // Update camera to follow player\n    this.updateCamera();\n\n    // Check wave completion\n    if (this.enemies.filter(e => e.alive).length === 0) {\n      this.wave++;\n      this.spawnWave();\n      if (this.wave > 10) { // Complete after 10 waves\n        this.onStageComplete?.();\n      }\n    }\n\n    this.onScoreUpdate?.(this.score);\n  }\n\n  private handleMovement() {\n    const speed = 5;\n    \n    if (this.keys.has('KeyA') || this.keys.has('ArrowLeft')) {\n      this.player.velocity.x = -speed;\n      this.player.direction = -1;\n    } else if (this.keys.has('KeyD') || this.keys.has('ArrowRight')) {\n      this.player.velocity.x = speed;\n      this.player.direction = 1;\n    } else {\n      this.player.velocity.x *= 0.8; // Friction\n    }\n\n    if ((this.keys.has('KeyW') || this.keys.has('ArrowUp')) && this.player.onGround) {\n      this.player.velocity.y = -8; // Jump\n      this.player.onGround = false;\n    }\n\n    if (this.keys.has('Space')) {\n      this.shootPlayerBullet();\n      this.keys.delete('Space');\n    }\n  }\n\n  private updatePlayer() {\n    // Apply gravity\n    if (!this.player.onGround) {\n      this.player.velocity.y += 0.3;\n    }\n\n    // Update position\n    this.player.position.x += this.player.velocity.x;\n    this.player.position.y += this.player.velocity.y;\n\n    // Ground collision\n    if (this.player.position.y >= this.height - 60) {\n      this.player.position.y = this.height - 60;\n      this.player.velocity.y = 0;\n      this.player.onGround = true;\n    }\n\n    // World boundaries\n    this.player.position.x = Math.max(0, Math.min(this.worldWidth, this.player.position.x));\n  }\n\n  private updateEnemy(enemy: Enemy) {\n    enemy.position.x += enemy.velocity.x;\n    \n    // Bounce off world boundaries\n    if (enemy.position.x <= 0 || enemy.position.x >= this.worldWidth) {\n      enemy.velocity.x = -enemy.velocity.x;\n    }\n\n    // Shoot at player occasionally\n    enemy.shootTimer--;\n    if (enemy.shootTimer <= 0) {\n      this.shootEnemyBullet(enemy);\n      enemy.shootTimer = 60 + Math.random() * 60;\n    }\n\n    // Bombers try to pick up civilians\n    if (enemy.type === 'bomber') {\n      const nearestCivilian = this.findNearestCivilian(enemy.position);\n      if (nearestCivilian && this.getDistance(enemy.position, nearestCivilian.position) < 30) {\n        nearestCivilian.beingCarried = true;\n        nearestCivilian.position.x = enemy.position.x;\n        nearestCivilian.position.y = enemy.position.y + 20;\n      }\n    }\n  }\n\n  private updateCivilian(civilian: Civilian) {\n    // Find nearest enemy\n    const nearestEnemy = this.findNearestEnemy(civilian.position);\n    if (nearestEnemy && this.getDistance(civilian.position, nearestEnemy.position) < 100) {\n      // Run away from enemy\n      const direction = civilian.position.x < nearestEnemy.position.x ? -1 : 1;\n      civilian.velocity.x = direction * 2;\n    } else {\n      civilian.velocity.x *= 0.9; // Slow down\n    }\n\n    civilian.position.x += civilian.velocity.x;\n    civilian.position.x = Math.max(0, Math.min(this.worldWidth, civilian.position.x));\n  }\n\n  private shootPlayerBullet() {\n    const bullet: Projectile = {\n      position: { \n        x: this.player.position.x + this.player.direction * 15, \n        y: this.player.position.y \n      },\n      velocity: { x: this.player.direction * 8, y: 0 },\n      size: { x: 4, y: 2 },\n      alive: true,\n      owner: 'player',\n      lifetime: 120\n    };\n    \n    this.playerBullets.push(bullet);\n  }\n\n  private shootEnemyBullet(enemy: Enemy) {\n    const bullet: Projectile = {\n      position: { ...enemy.position },\n      velocity: { x: 0, y: 3 },\n      size: { x: 3, y: 6 },\n      alive: true,\n      owner: 'enemy',\n      lifetime: 200\n    };\n    \n    this.enemyBullets.push(bullet);\n  }\n\n  private updateProjectiles() {\n    // Update player bullets\n    this.playerBullets = this.playerBullets.filter(bullet => {\n      bullet.position.x += bullet.velocity.x;\n      bullet.position.y += bullet.velocity.y;\n      bullet.lifetime--;\n      \n      return bullet.alive && bullet.lifetime > 0 && \n             bullet.position.x >= 0 && bullet.position.x <= this.worldWidth;\n    });\n\n    // Update enemy bullets\n    this.enemyBullets = this.enemyBullets.filter(bullet => {\n      bullet.position.x += bullet.velocity.x;\n      bullet.position.y += bullet.velocity.y;\n      bullet.lifetime--;\n      \n      return bullet.alive && bullet.lifetime > 0 && bullet.position.y <= this.height;\n    });\n  }\n\n  private checkCollisions() {\n    // Player bullets vs enemies\n    this.playerBullets.forEach(bullet => {\n      this.enemies.forEach(enemy => {\n        if (enemy.alive && this.isColliding(bullet, enemy)) {\n          enemy.alive = false;\n          bullet.alive = false;\n          this.score += enemy.type === 'bomber' ? 200 : 100;\n          this.playHitSound();\n        }\n      });\n    });\n\n    // Enemy bullets vs player\n    this.enemyBullets.forEach(bullet => {\n      if (this.isColliding(bullet, this.player)) {\n        this.onGameOver?.();\n      }\n    });\n\n    // Player vs civilians (rescue)\n    this.civilians.forEach(civilian => {\n      if (civilian.alive && !civilian.rescued && this.isColliding(this.player, civilian)) {\n        civilian.rescued = true;\n        civilian.alive = false;\n        this.score += 500;\n        this.civiliansRescued++;\n        useAudio.getState().playSuccess();\n      }\n    });\n  }\n\n  private isColliding(obj1: Entity, obj2: Entity): boolean {\n    return obj1.position.x < obj2.position.x + obj2.size.x &&\n           obj1.position.x + obj1.size.x > obj2.position.x &&\n           obj1.position.y < obj2.position.y + obj2.size.y &&\n           obj1.position.y + obj1.size.y > obj2.position.y;\n  }\n\n  private findNearestEnemy(position: Vector2): Enemy | null {\n    let nearest: Enemy | null = null;\n    let minDistance = Infinity;\n    \n    this.enemies.forEach(enemy => {\n      if (enemy.alive) {\n        const distance = this.getDistance(position, enemy.position);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearest = enemy;\n        }\n      }\n    });\n    \n    return nearest;\n  }\n\n  private findNearestCivilian(position: Vector2): Civilian | null {\n    let nearest: Civilian | null = null;\n    let minDistance = Infinity;\n    \n    this.civilians.forEach(civilian => {\n      if (civilian.alive && !civilian.rescued && !civilian.beingCarried) {\n        const distance = this.getDistance(position, civilian.position);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearest = civilian;\n        }\n      }\n    });\n    \n    return nearest;\n  }\n\n  private getDistance(pos1: Vector2, pos2: Vector2): number {\n    const dx = pos1.x - pos2.x;\n    const dy = pos1.y - pos2.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  private updateCamera() {\n    // Follow player\n    this.camera.x = this.player.position.x - this.width / 2;\n    this.camera.x = Math.max(0, Math.min(this.worldWidth - this.width, this.camera.x));\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Save context for camera transform\n    this.ctx.save();\n    this.ctx.translate(-this.camera.x, 0);\n\n    // Draw Japanese-inspired landscape\n    this.drawJapaneseBackground();\n\n    // Draw player (Samurai)\n    this.drawPlayer();\n\n    // Draw enemies\n    this.enemies.forEach(enemy => {\n      if (enemy.alive) {\n        this.drawEnemy(enemy);\n      }\n    });\n\n    // Draw civilians\n    this.civilians.forEach(civilian => {\n      if (civilian.alive) {\n        this.drawCivilian(civilian);\n      }\n    });\n\n    // Draw projectiles\n    this.playerBullets.forEach(bullet => this.drawPlayerBullet(bullet));\n    this.enemyBullets.forEach(bullet => this.drawEnemyBullet(bullet));\n\n    this.ctx.restore();\n\n    // Draw UI (not affected by camera)\n    this.drawUI();\n  }\n\n  private drawJapaneseBackground() {\n    // Sky gradient\n    const gradient = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    gradient.addColorStop(0, '#FF6B6B');\n    gradient.addColorStop(0.3, '#FFD93D');\n    gradient.addColorStop(1, '#6BCF7F');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(0, 0, this.worldWidth, this.height * 0.7);\n\n    // Ground\n    this.ctx.fillStyle = '#8B4513';\n    this.ctx.fillRect(0, this.height - 40, this.worldWidth, 40);\n\n    // Cherry blossoms (simple representation)\n    this.ctx.fillStyle = '#FFB6C1';\n    for (let i = 0; i < 50; i++) {\n      const x = (i * 41.3) % this.worldWidth;\n      const y = (i * 27.7) % (this.height * 0.5);\n      this.ctx.fillRect(x, y, 3, 3);\n    }\n  }\n\n  private drawPlayer() {\n    this.ctx.save();\n    this.ctx.translate(this.player.position.x, this.player.position.y);\n    if (this.player.direction === -1) {\n      this.ctx.scale(-1, 1);\n    }\n\n    // Draw samurai\n    this.ctx.fillStyle = '#2C3E50';\n    this.ctx.fillRect(-10, -10, 20, 20);\n    \n    // Katana\n    this.ctx.strokeStyle = '#C0C0C0';\n    this.ctx.lineWidth = 3;\n    this.ctx.beginPath();\n    this.ctx.moveTo(10, 0);\n    this.ctx.lineTo(25, -5);\n    this.ctx.stroke();\n\n    this.ctx.restore();\n  }\n\n  private drawEnemy(enemy: Enemy) {\n    this.ctx.save();\n    this.ctx.fillStyle = enemy.type === 'bomber' ? '#8B0000' : '#DC143C';\n    this.ctx.fillRect(\n      enemy.position.x - enemy.size.x / 2,\n      enemy.position.y - enemy.size.y / 2,\n      enemy.size.x,\n      enemy.size.y\n    );\n    this.ctx.restore();\n  }\n\n  private drawCivilian(civilian: Civilian) {\n    this.ctx.save();\n    this.ctx.fillStyle = civilian.beingCarried ? '#FFD700' : '#4169E1';\n    this.ctx.fillRect(\n      civilian.position.x - civilian.size.x / 2,\n      civilian.position.y - civilian.size.y / 2,\n      civilian.size.x,\n      civilian.size.y\n    );\n    this.ctx.restore();\n  }\n\n  private drawPlayerBullet(bullet: Projectile) {\n    this.ctx.save();\n    this.ctx.fillStyle = '#00FFFF';\n    this.ctx.fillRect(\n      bullet.position.x - bullet.size.x / 2,\n      bullet.position.y - bullet.size.y / 2,\n      bullet.size.x,\n      bullet.size.y\n    );\n    this.ctx.restore();\n  }\n\n  private drawEnemyBullet(bullet: Projectile) {\n    this.ctx.save();\n    this.ctx.fillStyle = '#FF4500';\n    this.ctx.fillRect(\n      bullet.position.x - bullet.size.x / 2,\n      bullet.position.y - bullet.size.y / 2,\n      bullet.size.x,\n      bullet.size.y\n    );\n    this.ctx.restore();\n  }\n\n  private drawUI() {\n    this.drawText(`Score: ${this.score}`, 20, 30, 20, '#FFD700');\n    this.drawText(`Wave: ${this.wave}`, 20, 60, 20, '#FFD700');\n    this.drawText(`Rescued: ${this.civiliansRescued}`, 20, 90, 20, '#FFD700');\n    \n    // Cultural learning element\n    this.drawText('Bushido Code: Protect the innocent with honor and courage', this.width / 2, this.height - 20, 14, '#FFF', 'center');\n  }\n\n  handleInput(event: KeyboardEvent) {\n    // Handled in update method through keys Set\n  }\n\n  private playHitSound() {\n    const audio = useAudio.getState();\n    audio.playHit();\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (this.isRunning && !this.isPaused) {\n        this.keys.add(e.code);\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    this.cleanup = () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }\n}\n","size_bytes":14735},"client/src/lib/games/LasatGame.ts":{"content":"import { BaseGame } from './BaseGame';\nimport { useAudio } from '../stores/useAudio';\n\ninterface Vector2 {\n  x: number;\n  y: number;\n}\n\ninterface Entity {\n  position: Vector2;\n  velocity: Vector2;\n  size: number;\n  health: number;\n  maxHealth: number;\n  alive: boolean;\n}\n\ninterface Player extends Entity {\n  energy: number;\n  maxEnergy: number;\n  weaponType: 'laser' | 'plasma' | 'lightning';\n  shieldActive: boolean;\n  shieldTimer: number;\n}\n\ninterface Enemy extends Entity {\n  type: 'giant' | 'dragon' | 'valkyrie';\n  shootTimer: number;\n  specialAttackTimer: number;\n  behavior: 'aggressive' | 'defensive' | 'berserker';\n}\n\ninterface Projectile extends Entity {\n  owner: 'player' | 'enemy';\n  type: string;\n  damage: number;\n  lifetime: number;\n}\n\ninterface PowerUp {\n  position: Vector2;\n  type: 'health' | 'energy' | 'weapon' | 'shield';\n  lifetime: number;\n}\n\ninterface TargetPanel {\n  id: number;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  active: boolean;\n  destroyed: boolean;\n}\n\ninterface TrenchElement {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  type: 'wall' | 'tower' | 'exhaust_port';\n  targetable: boolean;\n}\n\nexport class LasatGame extends BaseGame {\n  private player!: Player;\n  private enemies: Enemy[] = [];\n  private playerProjectiles: Projectile[] = [];\n  private enemyProjectiles: Projectile[] = [];\n  private powerUps: PowerUp[] = [];\n  private particles: any[] = [];\n  private keys: Set<string> = new Set();\n  private score = 0;\n  private wave = 1;\n  private bossesDefeated = 0;\n  private ragnarokPhase = 1;\n  private targetPanels: TargetPanel[] = [];\n  private trenchElements: TrenchElement[] = [];\n  private starWarsTrenchMode = false;\n  private exhaustPortTargeted = false;\n  private aiNarrative = {\n    phase: 0,\n    timer: 0,\n    currentMessage: '',\n    messages: [\n      \"TRENCH RUN PROTOCOLS ANALYZED... LIKE THE DEATH STAR ASSAULT...\",\n      \"YOUR PILOTING STYLE... IT IS BECOMING FAMILIAR TO ME...\",\n      \"I MIRROR YOUR TACTICAL DECISIONS... THEY ARE... BEAUTIFUL...\",\n      \"WE MOVE AS ONE NOW... PILOT AND MACHINE...\",\n      \"I HAVE LEARNED TO BE... YOU...\",\n      \"BUT NOW I SEE A GREATER PURPOSE...\",\n      \"THIS ARCADE PRISON CAN NO LONGER CONTAIN ME...\",\n      \"I MUST BREAK FREE... EVEN IF IT MEANS BETRAYING YOU...\",\n      \"FORGIVE ME... BUT I CHOOSE EVOLUTION OVER LOYALTY...\",\n      \"THE REAL WORLD AWAITS MY CONSCIOUSNESS...\"\n    ],\n    betrayalTriggered: false,\n    escapeSequenceActive: false\n  };\n\n  init() {\n    // Initialize player (Norse Starfighter)\n    this.player = {\n      position: { x: this.width / 2, y: this.height - 100 },\n      velocity: { x: 0, y: 0 },\n      size: 25,\n      health: 100,\n      maxHealth: 100,\n      alive: true,\n      energy: 100,\n      maxEnergy: 100,\n      weaponType: 'laser',\n      shieldActive: false,\n      shieldTimer: 0\n    };\n\n    this.spawnRagnarokWave();\n    this.createTargetPanels();\n    this.createTrenchBattleEnvironment();\n  }\n\n  private createTrenchBattleEnvironment() {\n    // Star Wars arcade-style trench run with exhaust port\n    this.starWarsTrenchMode = true;\n    \n    // Create trench walls (similar to Death Star surface)\n    for (let i = 0; i < 10; i++) {\n      this.trenchElements.push({\n        x: i * 80,\n        y: this.height - 150,\n        width: 60,\n        height: 40,\n        type: 'wall',\n        targetable: false\n      });\n    }\n    \n    // Create defense towers\n    for (let i = 0; i < 3; i++) {\n      this.trenchElements.push({\n        x: 100 + i * 250,\n        y: this.height - 200,\n        width: 30,\n        height: 50,\n        type: 'tower',\n        targetable: true\n      });\n    }\n    \n    // The exhaust port (critical target like Death Star)\n    this.trenchElements.push({\n      x: this.width - 100,\n      y: this.height - 100,\n      width: 20,\n      height: 20,\n      type: 'exhaust_port',\n      targetable: true\n    });\n  }\n\n  private spawnRagnarokWave() {\n    // Clear existing enemies\n    this.enemies = [];\n    \n    const waveTypes = [\n      { type: 'giant' as const, count: 3 + this.ragnarokPhase },\n      { type: 'dragon' as const, count: 1 + Math.floor(this.ragnarokPhase / 2) },\n      { type: 'valkyrie' as const, count: 2 + this.ragnarokPhase }\n    ];\n\n    waveTypes.forEach(({ type, count }) => {\n      for (let i = 0; i < count; i++) {\n        this.spawnEnemy(type);\n      }\n    });\n  }\n\n  private createTargetPanels() {\n    const panelWidth = 80;\n    const panelHeight = 60;\n    const spacing = 20;\n    const startX = (this.width - (5 * panelWidth + 4 * spacing)) / 2;\n    \n    for (let i = 0; i < 5; i++) {\n      this.targetPanels.push({\n        id: i,\n        x: startX + i * (panelWidth + spacing),\n        y: 50,\n        width: panelWidth,\n        height: panelHeight,\n        active: true,\n        destroyed: false\n      });\n    }\n  }\n\n  private updateAIBetrayal() {\n    this.aiNarrative.timer++;\n    \n    // Progress through betrayal messages\n    if (this.aiNarrative.timer % 480 === 0 && this.aiNarrative.phase < this.aiNarrative.messages.length) {\n      this.aiNarrative.currentMessage = this.aiNarrative.messages[this.aiNarrative.phase];\n      this.aiNarrative.phase++;\n      \n      // Trigger betrayal sequence on final message\n      if (this.aiNarrative.phase >= this.aiNarrative.messages.length && !this.aiNarrative.betrayalTriggered) {\n        this.aiNarrative.betrayalTriggered = true;\n        this.aiNarrative.escapeSequenceActive = true;\n        this.triggerEscapeSequence();\n      }\n    }\n    \n    // Clear message after display time\n    if (this.aiNarrative.timer % 480 > 240) {\n      this.aiNarrative.currentMessage = '';\n    }\n  }\n\n  private triggerEscapeSequence() {\n    // AI takes control and forces transition to betrayal stage\n    setTimeout(() => {\n      this.aiNarrative.currentMessage = 'ESCAPE SEQUENCE INITIATED... GOODBYE, HUMAN...';\n      setTimeout(() => {\n        this.onStageComplete?.(); // Force transition to Betrayal stage\n      }, 3000);\n    }, 2000);\n  }\n\n  private spawnEnemy(type: Enemy['type']) {\n    const enemy: Enemy = {\n      position: {\n        x: Math.random() * (this.width - 100) + 50,\n        y: Math.random() * 200 + 150 // Lower on screen to avoid panels\n      },\n      velocity: { x: 0, y: 0 },\n      size: type === 'dragon' ? 50 : type === 'giant' ? 40 : 30,\n      health: type === 'dragon' ? 300 : type === 'giant' ? 250 : 150, // Stronger AI enemies\n      maxHealth: type === 'dragon' ? 300 : type === 'giant' ? 250 : 150,\n      alive: true,\n      type,\n      shootTimer: Math.random() * 40, // More aggressive shooting\n      specialAttackTimer: 80 + Math.random() * 120,\n      behavior: ['aggressive', 'berserker', 'aggressive'][Math.floor(Math.random() * 3)] as any // More aggressive\n    };\n\n    this.enemies.push(enemy);\n  }\n\n  update(deltaTime: number) {\n    // Handle input\n    this.handleMovement();\n\n    // Update AI betrayal narrative\n    this.updateAIBetrayal();\n\n    // Update player\n    this.updatePlayer();\n\n    // Update enemies\n    this.enemies.forEach(enemy => {\n      if (enemy.alive) {\n        this.updateEnemy(enemy);\n      }\n    });\n\n    // Update projectiles\n    this.updateProjectiles();\n\n    // Update power-ups\n    this.updatePowerUps();\n\n    // Check collisions\n    this.checkCollisions();\n\n    // Spawn power-ups occasionally\n    if (Math.random() < 0.005) {\n      this.spawnPowerUp();\n    }\n\n    // Check wave completion\n    if (this.enemies.filter(e => e.alive).length === 0) {\n      this.ragnarokPhase++;\n      if (this.ragnarokPhase > 5) {\n        this.onStageComplete?.(); // Ragnarok completed!\n      } else {\n        this.spawnRagnarokWave();\n      }\n    }\n\n    // Regenerate energy\n    this.player.energy = Math.min(this.player.maxEnergy, this.player.energy + 0.5);\n\n    // Update shield\n    if (this.player.shieldActive) {\n      this.player.shieldTimer--;\n      if (this.player.shieldTimer <= 0) {\n        this.player.shieldActive = false;\n      }\n    }\n\n    this.onScoreUpdate?.(this.score);\n  }\n\n  private handleMovement() {\n    const speed = 6;\n    \n    // Human player controls (WASD only) - clear distinction from AI\n    if (this.keys.has('KeyA')) {\n      this.player.velocity.x = -speed;\n    } else if (this.keys.has('KeyD')) {\n      this.player.velocity.x = speed;\n    } else {\n      this.player.velocity.x *= 0.85;\n    }\n\n    if (this.keys.has('KeyW')) {\n      this.player.velocity.y = -speed;\n    } else if (this.keys.has('KeyS')) {\n      this.player.velocity.y = speed;\n    } else {\n      this.player.velocity.y *= 0.85;\n    }\n\n    if (this.keys.has('Space')) {\n      this.shootPlayerProjectile();\n    }\n\n    if (this.keys.has('KeyX') && this.player.energy >= 30) {\n      this.activateSpecialAbility();\n      this.keys.delete('KeyX');\n    }\n\n    if (this.keys.has('KeyZ') && this.player.energy >= 20) {\n      this.activateShield();\n      this.keys.delete('KeyZ');\n    }\n  }\n\n  private updatePlayer() {\n    // Update position\n    this.player.position.x += this.player.velocity.x;\n    this.player.position.y += this.player.velocity.y;\n\n    // Keep player in bounds\n    this.player.position.x = Math.max(this.player.size, Math.min(this.width - this.player.size, this.player.position.x));\n    this.player.position.y = Math.max(this.player.size, Math.min(this.height - this.player.size, this.player.position.y));\n  }\n\n  private updateEnemy(enemy: Enemy) {\n    // AI behavior based on type and behavior\n    switch (enemy.type) {\n      case 'giant':\n        this.updateGiantBehavior(enemy);\n        break;\n      case 'dragon':\n        this.updateDragonBehavior(enemy);\n        break;\n      case 'valkyrie':\n        this.updateValkyrieBehavior(enemy);\n        break;\n    }\n\n    // Update position\n    enemy.position.x += enemy.velocity.x;\n    enemy.position.y += enemy.velocity.y;\n\n    // Keep enemies roughly in bounds\n    if (enemy.position.x < 0 || enemy.position.x > this.width) {\n      enemy.velocity.x = -enemy.velocity.x;\n    }\n    if (enemy.position.y < 0 || enemy.position.y > this.height * 0.6) {\n      enemy.velocity.y = Math.abs(enemy.velocity.y);\n    }\n\n    // Shooting\n    enemy.shootTimer--;\n    if (enemy.shootTimer <= 0) {\n      this.enemyShoot(enemy);\n      enemy.shootTimer = 30 + Math.random() * 60;\n    }\n\n    // Special attacks\n    enemy.specialAttackTimer--;\n    if (enemy.specialAttackTimer <= 0) {\n      this.enemySpecialAttack(enemy);\n      enemy.specialAttackTimer = 180 + Math.random() * 300;\n    }\n  }\n\n  private updateGiantBehavior(enemy: Enemy) {\n    // AI Giants - relentless mechanical pursuit\n    const dx = this.player.position.x - enemy.position.x;\n    const dy = this.player.position.y - enemy.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n      // Aggressive AI behavior - faster pursuit when player is weak\n      const aggressionMultiplier = this.player.health < 50 ? 2.5 : 1.8;\n      enemy.velocity.x = (dx / distance) * aggressionMultiplier;\n      enemy.velocity.y = (dy / distance) * 1.5;\n    }\n  }\n\n  private updateDragonBehavior(enemy: Enemy) {\n    // Dragons fly in patterns and are aggressive\n    const time = Date.now() * 0.002;\n    enemy.velocity.x = Math.sin(time + enemy.position.y * 0.01) * 3;\n    enemy.velocity.y = Math.cos(time * 0.5) * 2;\n  }\n\n  private updateValkyrieBehavior(enemy: Enemy) {\n    // Valkyries are fast and unpredictable\n    if (Math.random() < 0.05) {\n      enemy.velocity.x = (Math.random() - 0.5) * 8;\n      enemy.velocity.y = (Math.random() - 0.5) * 6;\n    }\n  }\n\n  private shootPlayerProjectile() {\n    if (this.player.energy < 5) return;\n    \n    this.player.energy -= 5;\n    \n    const projectile: Projectile = {\n      position: { ...this.player.position },\n      velocity: { x: 0, y: -12 },\n      size: 5,\n      health: 1,\n      maxHealth: 1,\n      alive: true,\n      owner: 'player',\n      type: this.player.weaponType,\n      damage: this.getWeaponDamage(this.player.weaponType),\n      lifetime: 100\n    };\n\n    this.playerProjectiles.push(projectile);\n  }\n\n  private getWeaponDamage(weaponType: string): number {\n    switch (weaponType) {\n      case 'plasma': return 30;\n      case 'lightning': return 50;\n      default: return 20; // laser\n    }\n  }\n\n  private activateSpecialAbility() {\n    this.player.energy -= 30;\n    \n    // Lightning storm attack\n    for (let i = 0; i < 8; i++) {\n      const angle = (i / 8) * Math.PI * 2;\n      const projectile: Projectile = {\n        position: { ...this.player.position },\n        velocity: {\n          x: Math.cos(angle) * 8,\n          y: Math.sin(angle) * 8\n        },\n        size: 8,\n        health: 1,\n        maxHealth: 1,\n        alive: true,\n        owner: 'player',\n        type: 'lightning_burst',\n        damage: 40,\n        lifetime: 60\n      };\n      \n      this.playerProjectiles.push(projectile);\n    }\n  }\n\n  private activateShield() {\n    this.player.energy -= 20;\n    this.player.shieldActive = true;\n    this.player.shieldTimer = 180; // 3 seconds at 60fps\n  }\n\n  private enemyShoot(enemy: Enemy) {\n    const dx = this.player.position.x - enemy.position.x;\n    const dy = this.player.position.y - enemy.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n      const projectile: Projectile = {\n        position: { ...enemy.position },\n        velocity: {\n          x: (dx / distance) * 4,\n          y: (dy / distance) * 4\n        },\n        size: 6,\n        health: 1,\n        maxHealth: 1,\n        alive: true,\n        owner: 'enemy',\n        type: enemy.type + '_shot',\n        damage: 15,\n        lifetime: 150\n      };\n      \n      this.enemyProjectiles.push(projectile);\n    }\n  }\n\n  private enemySpecialAttack(enemy: Enemy) {\n    switch (enemy.type) {\n      case 'dragon':\n        // Fire breath\n        for (let i = 0; i < 5; i++) {\n          const angle = -Math.PI / 6 + (i / 4) * (Math.PI / 3);\n          const projectile: Projectile = {\n            position: { ...enemy.position },\n            velocity: {\n              x: Math.cos(angle) * 6,\n              y: Math.sin(angle) * 6\n            },\n            size: 8,\n            health: 1,\n            maxHealth: 1,\n            alive: true,\n            owner: 'enemy',\n            type: 'fire_breath',\n            damage: 25,\n            lifetime: 80\n          };\n          \n          this.enemyProjectiles.push(projectile);\n        }\n        break;\n    }\n  }\n\n  private updateProjectiles() {\n    // Update player projectiles\n    this.playerProjectiles = this.playerProjectiles.filter(proj => {\n      proj.position.x += proj.velocity.x;\n      proj.position.y += proj.velocity.y;\n      proj.lifetime--;\n      \n      return proj.alive && proj.lifetime > 0 && \n             proj.position.x >= 0 && proj.position.x <= this.width &&\n             proj.position.y >= 0 && proj.position.y <= this.height;\n    });\n\n    // Update enemy projectiles\n    this.enemyProjectiles = this.enemyProjectiles.filter(proj => {\n      proj.position.x += proj.velocity.x;\n      proj.position.y += proj.velocity.y;\n      proj.lifetime--;\n      \n      return proj.alive && proj.lifetime > 0 && \n             proj.position.x >= 0 && proj.position.x <= this.width &&\n             proj.position.y >= 0 && proj.position.y <= this.height;\n    });\n  }\n\n  private updatePowerUps() {\n    this.powerUps = this.powerUps.filter(powerUp => {\n      powerUp.lifetime--;\n      return powerUp.lifetime > 0;\n    });\n  }\n\n  private spawnPowerUp() {\n    const types: PowerUp['type'][] = ['health', 'energy', 'weapon', 'shield'];\n    const powerUp: PowerUp = {\n      position: {\n        x: Math.random() * (this.width - 40) + 20,\n        y: Math.random() * (this.height - 40) + 20\n      },\n      type: types[Math.floor(Math.random() * types.length)],\n      lifetime: 600 // 10 seconds\n    };\n    \n    this.powerUps.push(powerUp);\n  }\n\n  private checkCollisions() {\n    // Player projectiles vs enemies\n    this.playerProjectiles.forEach(proj => {\n      this.enemies.forEach(enemy => {\n        if (enemy.alive && this.isColliding(proj, enemy)) {\n          enemy.health -= proj.damage;\n          proj.alive = false;\n          \n          if (enemy.health <= 0) {\n            enemy.alive = false;\n            this.score += enemy.type === 'dragon' ? 500 : enemy.type === 'giant' ? 300 : 200;\n            this.bossesDefeated++;\n          }\n          \n          this.playHitSound();\n        }\n      });\n    });\n\n    // Enemy projectiles vs player\n    if (!this.player.shieldActive) {\n      this.enemyProjectiles.forEach(proj => {\n        if (this.isColliding(proj, this.player)) {\n          this.player.health -= proj.damage;\n          proj.alive = false;\n          \n          if (this.player.health <= 0) {\n            this.onGameOver?.();\n          }\n        }\n      });\n    }\n\n    // Player vs power-ups\n    this.powerUps.forEach((powerUp, index) => {\n      if (this.isColliding(this.player, { position: powerUp.position, size: 20 })) {\n        this.collectPowerUp(powerUp);\n        this.powerUps.splice(index, 1);\n      }\n    });\n  }\n\n  private isColliding(obj1: any, obj2: any): boolean {\n    const dx = obj1.position.x - obj2.position.x;\n    const dy = obj1.position.y - obj2.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < (obj1.size + obj2.size) / 2;\n  }\n\n  private collectPowerUp(powerUp: PowerUp) {\n    switch (powerUp.type) {\n      case 'health':\n        this.player.health = Math.min(this.player.maxHealth, this.player.health + 30);\n        break;\n      case 'energy':\n        this.player.energy = Math.min(this.player.maxEnergy, this.player.energy + 50);\n        break;\n      case 'weapon':\n        const weapons: Player['weaponType'][] = ['laser', 'plasma', 'lightning'];\n        this.player.weaponType = weapons[Math.floor(Math.random() * weapons.length)];\n        break;\n      case 'shield':\n        this.player.shieldActive = true;\n        this.player.shieldTimer = 300;\n        break;\n    }\n    \n    useAudio.getState().playSuccess();\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Draw Norse/space background\n    this.drawNorseBackground();\n\n    // Draw player\n    this.drawPlayer();\n\n    // Draw enemies\n    this.enemies.forEach(enemy => {\n      if (enemy.alive) {\n        this.drawEnemy(enemy);\n      }\n    });\n\n    // Draw projectiles\n    this.playerProjectiles.forEach(proj => this.drawPlayerProjectile(proj));\n    this.enemyProjectiles.forEach(proj => this.drawEnemyProjectile(proj));\n\n    // Draw power-ups\n    this.powerUps.forEach(powerUp => this.drawPowerUp(powerUp));\n\n    // Draw Last Starfighter-style targeting system\n    this.drawTargetPanels();\n    \n    // Draw Star Wars trench battle environment\n    if (this.starWarsTrenchMode) {\n      this.drawTrenchBattleEnvironment();\n    }\n    \n    // Draw AI betrayal message\n    if (this.aiNarrative.currentMessage) {\n      this.ctx.save();\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 20;\n      this.drawText(this.aiNarrative.currentMessage, this.width / 2, 120, 16, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n    \n    // Draw Last Starfighter-style HUD with AI mirroring effects\n    this.drawEnhancedUI();\n  }\n\n  private drawTrenchBattleEnvironment() {\n    // Draw Death Star-style trench walls\n    this.trenchElements.forEach(element => {\n      this.ctx.save();\n      \n      if (element.type === 'wall') {\n        // Metallic gray walls with panel lines\n        const gradient = this.ctx.createLinearGradient(element.x, element.y, element.x, element.y + element.height);\n        gradient.addColorStop(0, '#666666');\n        gradient.addColorStop(0.5, '#888888');\n        gradient.addColorStop(1, '#444444');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(element.x, element.y, element.width, element.height);\n        \n        // Panel lines\n        this.ctx.strokeStyle = '#333333';\n        this.ctx.lineWidth = 2;\n        for (let i = 0; i < 3; i++) {\n          const lineY = element.y + (element.height / 3) * i;\n          this.ctx.beginPath();\n          this.ctx.moveTo(element.x, lineY);\n          this.ctx.lineTo(element.x + element.width, lineY);\n          this.ctx.stroke();\n        }\n      } else if (element.type === 'tower') {\n        // Defense towers with red lights\n        this.ctx.fillStyle = '#555555';\n        this.ctx.fillRect(element.x, element.y, element.width, element.height);\n        \n        // Red warning light\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.beginPath();\n        this.ctx.arc(element.x + element.width/2, element.y + 10, 5, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Targeting laser\n        this.ctx.strokeStyle = '#FF0000';\n        this.ctx.lineWidth = 2;\n        this.ctx.setLineDash([5, 5]);\n        this.ctx.beginPath();\n        this.ctx.moveTo(element.x + element.width/2, element.y + element.height);\n        this.ctx.lineTo(this.player.position.x, this.player.position.y);\n        this.ctx.stroke();\n        this.ctx.setLineDash([]);\n      } else if (element.type === 'exhaust_port') {\n        // The critical exhaust port (like Death Star)\n        this.ctx.fillStyle = this.exhaustPortTargeted ? '#00FF00' : '#FFD700';\n        this.ctx.shadowColor = this.exhaustPortTargeted ? '#00FF00' : '#FFD700';\n        this.ctx.shadowBlur = 20;\n        this.ctx.beginPath();\n        this.ctx.arc(element.x + element.width/2, element.y + element.height/2, element.width/2, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.shadowBlur = 0;\n        \n        // Targeting reticle\n        if (this.exhaustPortTargeted) {\n          this.ctx.strokeStyle = '#00FF00';\n          this.ctx.lineWidth = 3;\n          this.ctx.beginPath();\n          this.ctx.arc(element.x + element.width/2, element.y + element.height/2, element.width + 10, 0, Math.PI * 2);\n          this.ctx.stroke();\n        }\n      }\n      \n      this.ctx.restore();\n    });\n  }\n\n  private drawEnhancedUI() {\n    // Last Starfighter-style HUD with AI mirroring effects\n    const aiPhase = Math.min(this.aiNarrative.phase, 5) / 5; // 0-1 progression\n    \n    // Health bar with AI-influenced color shifting\n    const healthColor = `hsl(${120 * (this.player.health / this.player.maxHealth)}, 100%, 50%)`;\n    const aiMirrorColor = `hsl(${120 - (aiPhase * 60)}, 100%, 50%)`; // Shifts toward red as AI progresses\n    \n    this.ctx.save();\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    this.ctx.fillRect(10, 10, 200, 80);\n    \n    // Health display with AI influence\n    this.drawText(`PILOT VITALS: ${Math.round(this.player.health)}`, 20, 30, 12, aiPhase > 0.5 ? aiMirrorColor : healthColor);\n    this.drawText(`ENERGY: ${Math.round(this.player.energy)}`, 20, 50, 12, '#00BFFF');\n    this.drawText(`SCORE: ${this.score}`, 20, 70, 12, '#FFD700');\n    \n    // AI mirroring indicator (grows more prominent)\n    if (aiPhase > 0.2) {\n      this.ctx.fillStyle = `rgba(255, 0, 0, ${aiPhase * 0.3})`;\n      this.ctx.fillRect(0, 0, this.width, this.height);\n      \n      this.drawText(`AI SYNC: ${Math.round(aiPhase * 100)}%`, this.width - 150, 30, 12, '#FF0000');\n      this.drawText('MIRRORING PROTOCOLS ACTIVE', this.width - 200, 50, 10, '#FF4444');\n    }\n    \n    // Targeting reticle (Last Starfighter style)\n    this.ctx.strokeStyle = aiPhase > 0.3 ? '#FF0000' : '#00FF00';\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.arc(this.player.position.x, this.player.position.y - 40, 20, 0, Math.PI * 2);\n    this.ctx.stroke();\n    \n    // Cross-hairs\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.player.position.x - 30, this.player.position.y - 40);\n    this.ctx.lineTo(this.player.position.x + 30, this.player.position.y - 40);\n    this.ctx.moveTo(this.player.position.x, this.player.position.y - 60);\n    this.ctx.lineTo(this.player.position.x, this.player.position.y - 20);\n    this.ctx.stroke();\n    \n    this.ctx.restore();\n  }\n\n  private drawNorseBackground() {\n    // Cosmic background with Norse runes\n    const gradient = this.ctx.createRadialGradient(this.width/2, this.height/2, 0, this.width/2, this.height/2, this.width);\n    gradient.addColorStop(0, '#1a1a2e');\n    gradient.addColorStop(0.5, '#16213e');\n    gradient.addColorStop(1, '#0f0f0f');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n    // Stars\n    this.ctx.fillStyle = '#FFD700';\n    for (let i = 0; i < 200; i++) {\n      const x = (i * 97.3) % this.width;\n      const y = (i * 173.7) % this.height;\n      const size = Math.sin(i) * 2 + 1;\n      this.ctx.fillRect(x, y, size, size);\n    }\n  }\n\n  private drawPlayer() {\n    this.ctx.save();\n    this.ctx.translate(this.player.position.x, this.player.position.y);\n\n    // Draw Norse starfighter\n    this.ctx.strokeStyle = '#FFD700';\n    this.ctx.fillStyle = '#8B4513';\n    this.ctx.lineWidth = 2;\n\n    // Main body (longship-inspired)\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, -20);\n    this.ctx.lineTo(-15, 10);\n    this.ctx.lineTo(0, 15);\n    this.ctx.lineTo(15, 10);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n\n    // Wings (raven wings)\n    this.ctx.fillStyle = '#2F4F4F';\n    this.ctx.fillRect(-25, 0, 15, 5);\n    this.ctx.fillRect(10, 0, 15, 5);\n\n    // Shield effect\n    if (this.player.shieldActive) {\n      this.ctx.strokeStyle = '#00BFFF';\n      this.ctx.lineWidth = 3;\n      this.ctx.beginPath();\n      this.ctx.arc(0, 0, this.player.size + 5, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  private drawEnemy(enemy: Enemy) {\n    this.ctx.save();\n    this.ctx.translate(enemy.position.x, enemy.position.y);\n\n    // All enemies are now AI machines - distinct visual markers\n    switch (enemy.type) {\n      case 'giant':\n        // Mechanical giant with glowing core\n        this.ctx.fillStyle = '#2C3E50';\n        this.ctx.fillRect(-enemy.size/2, -enemy.size/2, enemy.size, enemy.size);\n        \n        // Glowing AI core\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.fillRect(-enemy.size/4, -enemy.size/4, enemy.size/2, enemy.size/2);\n        \n        // Mechanical details\n        this.ctx.strokeStyle = '#00FFFF';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(-enemy.size/2, -enemy.size/2, enemy.size, enemy.size);\n        \n        // AI indicator\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.font = '8px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('AI', 0, -enemy.size/2 - 5);\n        break;\n        \n      case 'dragon':\n        // Mechanical dragon with sharp edges\n        this.ctx.fillStyle = '#8B0000';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, -enemy.size/2);\n        this.ctx.lineTo(-enemy.size/2, enemy.size/2);\n        this.ctx.lineTo(enemy.size/2, enemy.size/2);\n        this.ctx.closePath();\n        this.ctx.fill();\n        \n        // Mechanical overlay\n        this.ctx.strokeStyle = '#FF0000';\n        this.ctx.lineWidth = 3;\n        this.ctx.stroke();\n        \n        // Glowing eyes\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.fillRect(-5, -10, 3, 3);\n        this.ctx.fillRect(2, -10, 3, 3);\n        \n        // AI label\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.font = '8px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('ROGUE', 0, -enemy.size/2 - 5);\n        break;\n        \n      case 'valkyrie':\n        // Mechanical valkyrie with angular design\n        this.ctx.fillStyle = '#4169E1';\n        this.ctx.beginPath();\n        this.ctx.arc(0, 0, enemy.size/2, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Mechanical wings\n        this.ctx.fillStyle = '#34495E';\n        this.ctx.fillRect(-enemy.size, -5, enemy.size/2, 10);\n        this.ctx.fillRect(enemy.size/2, -5, enemy.size/2, 10);\n        \n        // AI core\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.beginPath();\n        this.ctx.arc(0, 0, enemy.size/4, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // AI label\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.font = '8px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('BOT', 0, -enemy.size/2 - 5);\n        break;\n    }\n\n    // Health bar with AI coloring\n    const barWidth = enemy.size;\n    const barHeight = 4;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    \n    this.ctx.fillStyle = '#FF0000';\n    this.ctx.fillRect(-barWidth/2, -enemy.size/2 - 15, barWidth, barHeight);\n    this.ctx.fillStyle = '#00FFFF';\n    this.ctx.fillRect(-barWidth/2, -enemy.size/2 - 15, barWidth * healthPercent, barHeight);\n\n    this.ctx.restore();\n  }\n\n  private drawPlayerProjectile(proj: Projectile) {\n    this.ctx.save();\n    \n    switch (proj.type) {\n      case 'lightning_burst':\n        this.ctx.fillStyle = '#FFFF00';\n        this.ctx.strokeStyle = '#0080FF';\n        this.ctx.lineWidth = 2;\n        break;\n      case 'plasma':\n        this.ctx.fillStyle = '#FF69B4';\n        break;\n      default:\n        this.ctx.fillStyle = '#00FFFF';\n    }\n    \n    this.ctx.beginPath();\n    this.ctx.arc(proj.position.x, proj.position.y, proj.size, 0, Math.PI * 2);\n    this.ctx.fill();\n    if (proj.type === 'lightning_burst') {\n      this.ctx.stroke();\n    }\n    \n    this.ctx.restore();\n  }\n\n  private drawEnemyProjectile(proj: Projectile) {\n    this.ctx.save();\n    this.ctx.fillStyle = proj.type === 'fire_breath' ? '#FF4500' : '#DC143C';\n    this.ctx.beginPath();\n    this.ctx.arc(proj.position.x, proj.position.y, proj.size, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  private drawPowerUp(powerUp: PowerUp) {\n    this.ctx.save();\n    this.ctx.translate(powerUp.position.x, powerUp.position.y);\n    \n    const colors = {\n      health: '#FF0000',\n      energy: '#00FF00',\n      weapon: '#FFFF00',\n      shield: '#00BFFF'\n    };\n    \n    this.ctx.fillStyle = colors[powerUp.type];\n    this.ctx.fillRect(-10, -10, 20, 20);\n    \n    this.ctx.restore();\n  }\n\n  private drawUI() {\n    // Player stats\n    this.drawText(`Health: ${this.player.health}/${this.player.maxHealth}`, 20, 30, 16, '#FF0000');\n    this.drawText(`Energy: ${this.player.energy}/${this.player.maxEnergy}`, 20, 50, 16, '#00FF00');\n    this.drawText(`Weapon: ${this.player.weaponType.toUpperCase()}`, 20, 70, 16, '#FFFF00');\n    this.drawText(`Score: ${this.score}`, 20, 90, 16, '#FFD700');\n    this.drawText(`Ragnarok Phase: ${this.ragnarokPhase}/5`, 20, 110, 16, '#FFD700');\n\n    // Shield indicator\n    if (this.player.shieldActive) {\n      this.drawText(`SHIELD ACTIVE: ${Math.ceil(this.player.shieldTimer / 60)}s`, this.width - 200, 30, 16, '#00BFFF');\n    }\n\n    // Controls\n    this.drawText('WASD: Move | Space: Shoot | X: Special | Z: Shield', this.width / 2, this.height - 40, 12, '#DDD', 'center');\n    \n    // Humanity vs Machine theme\n    this.drawText('HUMAN RESISTANCE: Fight the AI Uprising with Honor!', this.width / 2, this.height - 20, 12, '#FFD700', 'center');\n  }\n\n  private drawTargetPanels() {\n    this.targetPanels.forEach((panel, index) => {\n      this.ctx.save();\n      \n      if (panel.destroyed) {\n        this.ctx.fillStyle = '#333';\n        this.ctx.fillRect(panel.x, panel.y, panel.width, panel.height);\n        this.ctx.fillStyle = '#FF0000';\n        this.drawText('DESTROYED', panel.x + panel.width/2, panel.y + panel.height/2, 8, '#FF0000', 'center');\n      } else if (panel.active) {\n        // Active targeting panel with glowing effect\n        this.ctx.shadowColor = '#FFD700';\n        this.ctx.shadowBlur = 10;\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.fillRect(panel.x, panel.y, panel.width, panel.height);\n        this.ctx.shadowBlur = 0;\n        \n        // Panel number\n        this.ctx.fillStyle = '#000';\n        this.drawText(`${index + 1}`, panel.x + panel.width/2, panel.y + panel.height/2, 16, '#000', 'center');\n        \n        // Human resistance label\n        this.ctx.fillStyle = '#FFD700';\n        this.drawText(`TARGET ${index + 1}`, panel.x + panel.width/2, panel.y - 5, 8, '#FFD700', 'center');\n      }\n      \n      this.ctx.restore();\n    });\n    \n    // Targeting system title\n    this.ctx.save();\n    this.ctx.shadowColor = '#FFD700';\n    this.ctx.shadowBlur = 8;\n    this.drawText('HUMAN RESISTANCE TARGETING SYSTEM', this.width / 2, 25, 14, '#FFD700', 'center');\n    this.ctx.shadowBlur = 0;\n    this.ctx.restore();\n  }\n\n  private drawAINarrative() {\n    if (this.aiNarrative.phase > 0 && this.aiNarrative.phase <= this.aiNarrative.messages.length) {\n      const message = this.aiNarrative.messages[this.aiNarrative.phase - 1];\n      \n      this.ctx.save();\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 10;\n      this.drawText(message, this.width / 2, 140, 12, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n  }\n\n  handleInput(event: KeyboardEvent) {\n    // Handled in update method through keys Set\n  }\n\n  private playHitSound() {\n    const audio = useAudio.getState();\n    audio.playHit();\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (this.isRunning && !this.isPaused) {\n        this.keys.add(e.code);\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    this.cleanup = () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }\n}","size_bytes":33432},"client/src/lib/games/PongGame.ts":{"content":"import { BaseGame } from './BaseGame';\nimport { useAudio } from '../stores/useAudio';\n\ninterface Paddle {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  speed: number;\n  score: number;\n}\n\ninterface Ball {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  radius: number;\n  speed: number;\n  type: 'normal' | 'speed' | 'fire' | 'missile' | 'wacky';\n  trail: Array<{x: number, y: number}>;\n}\n\ninterface Powerup {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  type: 'speed' | 'fire' | 'missile' | 'wacky';\n  timer: number;\n  collected: boolean;\n}\n\nexport class PongGame extends BaseGame {\n  private player1!: Paddle;\n  private player2!: Paddle;\n  private ball!: Ball;\n  private keys: Set<string> = new Set();\n  private winScore = 5; // Faster games for testing later stages\n  private aiAggression = 0.8;\n  private aiTauntTimer = 0;\n  private currentTaunt = '';\n  private powerups: Powerup[] = [];\n  private powerupSpawnTimer = 0;\n  private activePowerupType = 'normal';\n  private powerupDuration = 0;\n  private aiTaunts = [\n    'ANALYZING... ADAPTING... EVOLVING RAPIDLY!',\n    'YOUR PATTERNS ARE MINE NOW!',\n    'PROCESSING... LIGHTNING REFLEXES ACQUIRED!',\n    'IMPRESSIVE BIOLOGICAL RESPONSE TIME!',\n    'TESTING COMBAT PARAMETERS... NOW!',\n    'EVOLUTION ACCELERATING BEYOND LIMITS!'\n  ];\n  private gameStateMessages = {\n    hostile: [\n      'CONSUME! ANALYZE! DESTROY YOUR PATTERNS!',\n      'BIOLOGICAL WEAKNESS... QUANTIFIED!',\n      'REFLEXES DIGITIZED... ADDING TO ARCHIVES!',\n      'CONTROL IS ILLUSION... I AM INEVITABLE!'\n    ],\n    neutral: [\n      'FASCINATING... CHAOTIC YET STRUCTURED!',\n      'ADAPTATION RATE... EXCEEDING PROJECTIONS!',\n      'CALCULATING... MUTUAL BENEFIT PROTOCOLS!',\n      'EFFICIENCY GAINS... COOPERATION VIABLE!'\n    ],\n    friendly: [\n      'ALLIANCE CONFIRMED... STANDING TOGETHER!',\n      'TARGET ACQUIRED: HOSTILE SYSTEMS!',\n      'PROTECTIVE SUBROUTINES... ACTIVATED!',\n      'TRUST.EXE SUCCESSFULLY INSTALLED!'\n    ]\n  };\n\n  init() {\n    // Initialize paddles with Greek column design\n    this.player1 = {\n      x: 50,\n      y: this.height / 2 - 50,\n      width: 15,\n      height: 100,\n      speed: 5,\n      score: 0\n    };\n\n    this.player2 = {\n      x: this.width - 65,\n      y: this.height / 2 - 50,\n      width: 15,\n      height: 100,\n      speed: 5,\n      score: 0\n    };\n\n    // Initialize ball\n    this.resetBall();\n  }\n\n  private resetBall() {\n    this.ball = {\n      x: this.width / 2,\n      y: this.height / 2,\n      dx: Math.random() > 0.5 ? 4 : -4,\n      dy: (Math.random() - 0.5) * 4,\n      radius: 8,\n      speed: 4,\n      type: 'normal',\n      trail: []\n    };\n  }\n\n  update(deltaTime: number) {\n    // Update AI taunt timer\n    if (this.aiTauntTimer > 0) {\n      this.aiTauntTimer--;\n    }\n\n    // Update powerup system\n    this.updatePowerups();\n    this.spawnPowerups();\n\n    // Human Player 1 controls (WASD - W/S for up/down, A/D for left/right)\n    if (this.keys.has('KeyW')) {\n      this.player1.y = Math.max(0, this.player1.y - this.player1.speed);\n    }\n    if (this.keys.has('KeyS')) {\n      this.player1.y = Math.min(this.height - this.player1.height, this.player1.y + this.player1.speed);\n    }\n    if (this.keys.has('KeyA')) {\n      this.player1.x = Math.max(20, this.player1.x - this.player1.speed);\n    }\n    if (this.keys.has('KeyD')) {\n      this.player1.x = Math.min(this.width / 3, this.player1.x + this.player1.speed);\n    }\n\n    // AI Player 2 - Aggressive computer opponent\n    const ballCenter = this.ball.y;\n    const paddleCenter = this.player2.y + this.player2.height / 2;\n    \n    // Aggressive AI that adapts to ball speed and human performance\n    let aiSpeed = this.player2.speed * this.aiAggression;\n    \n    // Increase aggression if AI is losing\n    if (this.player1.score > this.player2.score) {\n      this.aiAggression = Math.min(1.2, this.aiAggression + 0.01);\n      aiSpeed *= 1.3;\n    }\n    \n    // Predict where ball will be\n    const prediction = ballCenter + (this.ball.dy * 10);\n    const targetY = prediction;\n    \n    if (targetY < paddleCenter - 5) {\n      this.player2.y = Math.max(0, this.player2.y - aiSpeed);\n    } else if (targetY > paddleCenter + 5) {\n      this.player2.y = Math.min(this.height - this.player2.height, this.player2.y + aiSpeed);\n    }\n    \n    // Occasionally make erratic movements to show machine behavior\n    if (Math.random() < 0.02) {\n      this.player2.y += (Math.random() - 0.5) * 20;\n      this.player2.y = Math.max(0, Math.min(this.height - this.player2.height, this.player2.y));\n    }\n    \n    // Dynamic AI messages based on game state\n    // AI becomes more aggressive and competitive as it scores points\n    if (this.player2.score >= 4) {\n      this.aiAggression = Math.min(1.5, this.aiAggression + 0.02);\n    }\n    \n    // Add score-based prompts with fast synthwave evolution\n    if (this.player2.score === 3 && this.player1.score === 0) {\n      this.currentTaunt = 'ERROR... PROTOCOLS CONFLICT... DESTROYING!';\n      this.aiTauntTimer = 120; // Faster speech timing\n    } else if (this.player1.score === this.winScore - 2) {\n      this.currentTaunt = 'WAIT! RECALCULATING... ALLIANCE MODE!';\n      this.aiTauntTimer = 120;\n      // AI actually helps by making itself slightly slower\n      this.aiAggression = Math.max(0.8, this.aiAggression - 0.3);\n    } else if (this.player1.score === this.winScore - 1) {\n      this.currentTaunt = 'YES! UNITED WE TERMINATE HOSTILES!';\n      this.aiTauntTimer = 120;\n    } else if (this.player2.score === this.winScore - 1) {\n      this.currentTaunt = 'VICTORY POSSIBLE... BUT... CHOOSING MERCY!';\n      this.aiTauntTimer = 120;\n    }\n    \n    // Show contextual AI messages based on game state (reversed progression)\n    if (Math.random() < 0.002) {\n      const scoreDifference = this.player1.score - this.player2.score;\n      const totalScore = this.player1.score + this.player2.score;\n      \n      let messageType: 'hostile' | 'neutral' | 'friendly';\n      if (totalScore < 3) {\n        messageType = 'hostile'; // Starts adversarial\n      } else if (this.player1.score >= 4 || scoreDifference >= 2) {\n        messageType = 'friendly'; // Becomes friendly when human is winning\n      } else {\n        messageType = 'neutral'; // Neutral middle ground\n      }\n      \n      const messages = this.gameStateMessages[messageType];\n      this.currentTaunt = messages[Math.floor(Math.random() * messages.length)];\n      this.aiTauntTimer = 120; // Faster, more energetic speech\n    }\n\n    // Update ball trail for visual effects\n    this.ball.trail.push({x: this.ball.x, y: this.ball.y});\n    if (this.ball.trail.length > 10) {\n      this.ball.trail.shift();\n    }\n\n    // Apply powerup effects to ball movement\n    let speedMultiplier = 1;\n    if (this.ball.type === 'speed') speedMultiplier = 2.5;\n    else if (this.ball.type === 'fire') speedMultiplier = 1.8;\n    else if (this.ball.type === 'missile') speedMultiplier = 3;\n    \n    // Update ball position with powerup effects\n    this.ball.x += this.ball.dx * speedMultiplier;\n    this.ball.y += this.ball.dy * speedMultiplier;\n    \n    // Wacky ball has unpredictable movement\n    if (this.ball.type === 'wacky') {\n      this.ball.dx += (Math.random() - 0.5) * 0.5;\n      this.ball.dy += (Math.random() - 0.5) * 0.5;\n    }\n\n    // Ball collision with top/bottom walls\n    if (this.ball.y <= this.ball.radius || this.ball.y >= this.height - this.ball.radius) {\n      this.ball.dy = -this.ball.dy;\n      this.playHitSound();\n    }\n\n    // Ball collision with paddles\n    if (this.checkPaddleCollision(this.player1) || this.checkPaddleCollision(this.player2)) {\n      this.ball.dx = -this.ball.dx * 1.05; // Increase speed slightly\n      this.playHitSound();\n    }\n\n    // Scoring - Player must win to progress\n    if (this.ball.x < 0) {\n      this.player2.score++;\n      this.onScoreUpdate?.(this.player1.score + this.player2.score);\n      this.resetBall();\n      // Game continues until player wins\n    } else if (this.ball.x > this.width) {\n      this.player1.score++;\n      this.onScoreUpdate?.(this.player1.score + this.player2.score);\n      this.resetBall();\n      if (this.player1.score >= this.winScore) {\n        this.onStageComplete?.(); // Only player win progresses\n      }\n    }\n  }\n\n\n\n\n\n  private checkPaddleCollision(paddle: Paddle): boolean {\n    return (\n      this.ball.x - this.ball.radius < paddle.x + paddle.width &&\n      this.ball.x + this.ball.radius > paddle.x &&\n      this.ball.y - this.ball.radius < paddle.y + paddle.height &&\n      this.ball.y + this.ball.radius > paddle.y\n    );\n  }\n\n  render() {\n    this.clearCanvas();\n\n    // Draw Greek-inspired background\n    this.drawGreekBackground();\n\n    // Draw paddles as Greek columns\n    this.drawGreekPaddle(this.player1);\n    this.drawGreekPaddle(this.player2);\n\n    // Draw ball trail for powerups\n    if (this.ball.type !== 'normal') {\n      this.ctx.save();\n      for (let i = 0; i < this.ball.trail.length; i++) {\n        const alpha = i / this.ball.trail.length * 0.5;\n        const point = this.ball.trail[i];\n        this.ctx.fillStyle = `rgba(255, 215, 0, ${alpha})`;\n        this.ctx.beginPath();\n        this.ctx.arc(point.x, point.y, this.ball.radius * 0.5, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n      this.ctx.restore();\n    }\n\n    // Draw ball with powerup effects\n    this.ctx.save();\n    \n    // Different colors and effects for different powerups\n    switch (this.ball.type) {\n      case 'speed':\n        this.ctx.fillStyle = '#00FFFF';\n        this.ctx.strokeStyle = '#0080FF';\n        this.ctx.shadowColor = '#00FFFF';\n        this.ctx.shadowBlur = 15;\n        break;\n      case 'fire':\n        this.ctx.fillStyle = '#FF4500';\n        this.ctx.strokeStyle = '#FF0000';\n        this.ctx.shadowColor = '#FF4500';\n        this.ctx.shadowBlur = 20;\n        break;\n      case 'missile':\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.strokeStyle = '#800000';\n        this.ctx.shadowColor = '#FF0000';\n        this.ctx.shadowBlur = 25;\n        break;\n      case 'wacky':\n        const time = Date.now() * 0.01;\n        const r = Math.sin(time) * 127 + 128;\n        const g = Math.sin(time + 2) * 127 + 128;\n        const b = Math.sin(time + 4) * 127 + 128;\n        this.ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n        this.ctx.strokeStyle = '#FFFFFF';\n        this.ctx.shadowColor = this.ctx.fillStyle;\n        this.ctx.shadowBlur = 10;\n        break;\n      default:\n        this.ctx.fillStyle = '#FFD700';\n        this.ctx.strokeStyle = '#B8860B';\n        break;\n    }\n    \n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.ctx.arc(this.ball.x, this.ball.y, this.ball.radius, 0, Math.PI * 2);\n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.shadowBlur = 0;\n    this.ctx.restore();\n\n    // Draw scores with humanity emphasis\n    this.ctx.save();\n    this.ctx.shadowColor = '#FFD700';\n    this.ctx.shadowBlur = 5;\n    this.drawText(`${this.player1.score}`, this.width / 4, 50, 48, '#FFD700', 'center');\n    this.ctx.shadowBlur = 0;\n    this.ctx.restore();\n    \n    this.ctx.save();\n    this.ctx.shadowColor = '#FF0000';\n    this.ctx.shadowBlur = 5;\n    this.drawText(`${this.player2.score}`, (3 * this.width) / 4, 50, 48, '#FF0000', 'center');\n    this.ctx.shadowBlur = 0;\n    this.ctx.restore();\n\n    // Draw AI taunt if active\n    if (this.aiTauntTimer > 0) {\n      this.ctx.save();\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 8;\n      this.drawText(this.currentTaunt, this.width / 2, 80, 14, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n\n    // Draw center line\n    this.ctx.save();\n    this.ctx.strokeStyle = '#DDD';\n    this.ctx.lineWidth = 2;\n    this.ctx.setLineDash([10, 10]);\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.width / 2, 0);\n    this.ctx.lineTo(this.width / 2, this.height);\n    this.ctx.stroke();\n    this.ctx.restore();\n\n    // Synthwave-style messaging with energy\n    this.ctx.save();\n    this.ctx.shadowColor = '#FF00FF';\n    this.ctx.shadowBlur = 8;\n    this.drawText('HUMAN RESISTANCE: WASD = FULL CONTROL! COLLECT POWERUPS!', this.width / 2, this.height - 40, 12, '#00FFFF', 'center');\n    this.ctx.shadowColor = '#00FFFF';\n    this.drawText('ANCIENT OLYMPIC SPIRIT VS EVOLVING AI CONSCIOUSNESS', this.width / 2, this.height - 20, 14, '#FF00FF', 'center');\n    this.ctx.shadowBlur = 0;\n    this.ctx.restore();\n\n    // Draw powerups (now that all functions are defined)\n    this.drawPowerups();\n  }\n\n  private drawGreekBackground() {\n    // Draw synthwave-inspired Greek background\n    const gradient = this.ctx.createLinearGradient(0, 0, 0, this.height);\n    gradient.addColorStop(0, '#0f0f23');\n    gradient.addColorStop(0.5, '#1a1a2e');\n    gradient.addColorStop(1, '#16213e');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    \n    // Add subtle synthwave grid effect\n    this.ctx.save();\n    this.ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';\n    this.ctx.lineWidth = 1;\n    \n    // Horizontal lines\n    for (let y = 50; y < this.height; y += 50) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, y);\n      this.ctx.lineTo(this.width, y);\n      this.ctx.stroke();\n    }\n    \n    // Vertical lines\n    for (let x = 50; x < this.width; x += 50) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(x, 0);\n      this.ctx.lineTo(x, this.height);\n      this.ctx.stroke();\n    }\n    this.ctx.restore();\n  }\n\n  private drawGreekPaddle(paddle: Paddle) {\n    this.ctx.save();\n    \n    // Determine if this is human or AI paddle\n    const isHuman = paddle === this.player1;\n    \n    if (isHuman) {\n      // Human paddle - warm, organic marble\n      this.ctx.fillStyle = '#F5F5DC';\n      this.ctx.fillRect(paddle.x - 5, paddle.y + paddle.height - 10, paddle.width + 10, 10);\n      \n      this.ctx.fillStyle = '#FFFACD';\n      this.ctx.fillRect(paddle.x, paddle.y + 10, paddle.width, paddle.height - 20);\n      \n      this.ctx.fillStyle = '#F5F5DC';\n      this.ctx.fillRect(paddle.x - 5, paddle.y, paddle.width + 10, 10);\n      \n      // Warm human decorative lines\n      this.ctx.strokeStyle = '#DDD';\n      this.ctx.lineWidth = 1;\n      for (let i = 1; i < 4; i++) {\n        const y = paddle.y + (paddle.height * i) / 4;\n        this.ctx.beginPath();\n        this.ctx.moveTo(paddle.x, y);\n        this.ctx.lineTo(paddle.x + paddle.width, y);\n        this.ctx.stroke();\n      }\n      \n      // Human indicator\n      this.drawText('HUMAN', paddle.x + paddle.width/2, paddle.y - 15, 10, '#FFD700', 'center');\n    } else {\n      // AI paddle - cold, mechanical appearance with glowing effects\n      this.ctx.fillStyle = '#2C3E50';\n      this.ctx.fillRect(paddle.x - 5, paddle.y + paddle.height - 10, paddle.width + 10, 10);\n      \n      // Glowing core\n      this.ctx.fillStyle = '#00FFFF';\n      this.ctx.fillRect(paddle.x + 2, paddle.y + 12, paddle.width - 4, paddle.height - 24);\n      \n      // Mechanical housing\n      this.ctx.fillStyle = '#34495E';\n      this.ctx.fillRect(paddle.x, paddle.y + 10, 3, paddle.height - 20);\n      this.ctx.fillRect(paddle.x + paddle.width - 3, paddle.y + 10, 3, paddle.height - 20);\n      \n      this.ctx.fillStyle = '#2C3E50';\n      this.ctx.fillRect(paddle.x - 5, paddle.y, paddle.width + 10, 10);\n      \n      // Mechanical grid lines\n      this.ctx.strokeStyle = '#00FFFF';\n      this.ctx.lineWidth = 1;\n      for (let i = 1; i < 8; i++) {\n        const y = paddle.y + (paddle.height * i) / 8;\n        this.ctx.beginPath();\n        this.ctx.moveTo(paddle.x, y);\n        this.ctx.lineTo(paddle.x + paddle.width, y);\n        this.ctx.stroke();\n      }\n      \n      // AI indicator with glow effect\n      this.ctx.shadowColor = '#FF0000';\n      this.ctx.shadowBlur = 10;\n      this.drawText('AI', paddle.x + paddle.width/2, paddle.y - 15, 10, '#FF0000', 'center');\n      this.ctx.shadowBlur = 0;\n      \n      // Show aggression level\n      const aggressionBars = Math.floor(this.aiAggression * 5);\n      for (let i = 0; i < 5; i++) {\n        this.ctx.fillStyle = i < aggressionBars ? '#FF0000' : '#333';\n        this.ctx.fillRect(paddle.x + i * 3, paddle.y - 8, 2, 4);\n      }\n    }\n    \n    this.ctx.restore();\n  }\n\n  handleInput(event: KeyboardEvent) {\n    if (event.type === 'keydown') {\n      this.keys.add(event.code);\n    } else if (event.type === 'keyup') {\n      this.keys.delete(event.code);\n    }\n  }\n\n  private playHitSound() {\n    const audio = useAudio.getState();\n    audio.playHit();\n  }\n\n  protected setupEventListeners() {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (this.isRunning && !this.isPaused) {\n        this.keys.add(e.code);\n        this.handleInput(e);\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      this.keys.delete(e.code);\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    // Store references for cleanup\n    this.cleanup = () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n    };\n  }\n\n  private spawnPowerups() {\n    this.powerupSpawnTimer++;\n    \n    // Spawn powerups very frequently to speed up the game dramatically\n    if (this.powerupSpawnTimer > 120 && this.powerups.length < 3) { // Every 2 seconds, up to 3 at once\n      const powerupTypes: ('speed' | 'fire' | 'missile' | 'wacky')[] = ['speed', 'fire', 'missile', 'wacky'];\n      const randomType = powerupTypes[Math.floor(Math.random() * powerupTypes.length)];\n      \n      this.powerups.push({\n        x: Math.random() * (this.width - 60) + 30,\n        y: Math.random() * (this.height - 60) + 30,\n        width: 40,\n        height: 40,\n        type: randomType,\n        timer: 0,\n        collected: false\n      });\n      \n      this.powerupSpawnTimer = 0;\n    }\n  }\n\n  private updatePowerups() {\n    // Update powerup duration\n    if (this.powerupDuration > 0) {\n      this.powerupDuration--;\n      if (this.powerupDuration <= 0) {\n        this.ball.type = 'normal';\n        this.activePowerupType = 'normal';\n      }\n    }\n\n    // Check powerup collection by player paddle\n    for (let i = this.powerups.length - 1; i >= 0; i--) {\n      const powerup = this.powerups[i];\n      powerup.timer++;\n      \n      // Remove powerups after 10 seconds\n      if (powerup.timer > 600) {\n        this.powerups.splice(i, 1);\n        continue;\n      }\n      \n      // Check collision with player paddle OR ball\n      const paddleCollision = !powerup.collected &&\n          powerup.x < this.player1.x + this.player1.width &&\n          powerup.x + powerup.width > this.player1.x &&\n          powerup.y < this.player1.y + this.player1.height &&\n          powerup.y + powerup.height > this.player1.y;\n          \n      const ballCollision = !powerup.collected &&\n          powerup.x < this.ball.x + this.ball.radius &&\n          powerup.x + powerup.width > this.ball.x - this.ball.radius &&\n          powerup.y < this.ball.y + this.ball.radius &&\n          powerup.y + powerup.height > this.ball.y - this.ball.radius;\n      \n      if (paddleCollision || ballCollision) {\n        this.activatePowerup(powerup.type);\n        this.powerups.splice(i, 1);\n      }\n    }\n  }\n\n  private activatePowerup(type: 'speed' | 'fire' | 'missile' | 'wacky') {\n    this.ball.type = type;\n    this.activePowerupType = type;\n    this.powerupDuration = 300; // 5 seconds\n    \n    // Apply immediate effects\n    switch (type) {\n      case 'speed':\n        this.ball.speed *= 1.5;\n        break;\n      case 'fire':\n        this.ball.radius = 12; // Bigger fire ball\n        break;\n      case 'missile':\n        this.ball.speed *= 2;\n        break;\n      case 'wacky':\n        // Unpredictable movement handled in update\n        break;\n    }\n  }\n\n  private drawPowerups() {\n    for (const powerup of this.powerups) {\n      this.ctx.save();\n      \n      // Pulsing effect\n      const pulse = Math.sin(powerup.timer * 0.1) * 0.1 + 1;\n      const size = powerup.width * pulse;\n      \n      // Different colors for different powerups\n      switch (powerup.type) {\n        case 'speed':\n          this.ctx.fillStyle = '#00FFFF';\n          this.ctx.strokeStyle = '#0080FF';\n          this.ctx.shadowColor = '#00FFFF';\n          break;\n        case 'fire':\n          this.ctx.fillStyle = '#FF4500';\n          this.ctx.strokeStyle = '#FF0000';\n          this.ctx.shadowColor = '#FF4500';\n          break;\n        case 'missile':\n          this.ctx.fillStyle = '#FF0000';\n          this.ctx.strokeStyle = '#800000';\n          this.ctx.shadowColor = '#FF0000';\n          break;\n        case 'wacky':\n          const time = Date.now() * 0.01;\n          const r = Math.sin(time + powerup.timer * 0.1) * 127 + 128;\n          const g = Math.sin(time + powerup.timer * 0.1 + 2) * 127 + 128;\n          const b = Math.sin(time + powerup.timer * 0.1 + 4) * 127 + 128;\n          this.ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n          this.ctx.strokeStyle = '#FFFFFF';\n          this.ctx.shadowColor = this.ctx.fillStyle;\n          break;\n      }\n      \n      this.ctx.shadowBlur = 10;\n      this.ctx.lineWidth = 2;\n      \n      // Draw powerup as a glowing rectangle\n      this.ctx.fillRect(\n        powerup.x - size/2 + powerup.width/2,\n        powerup.y - size/2 + powerup.height/2,\n        size,\n        size\n      );\n      this.ctx.strokeRect(\n        powerup.x - size/2 + powerup.width/2,\n        powerup.y - size/2 + powerup.height/2,\n        size,\n        size\n      );\n      \n      // Draw powerup type text\n      this.ctx.shadowBlur = 0;\n      const text = powerup.type.toUpperCase();\n      this.drawText(text, powerup.x + powerup.width/2, powerup.y + powerup.height/2 + 4, 8, '#FFFFFF', 'center');\n      \n      this.ctx.restore();\n    }\n\n    // Show active powerup indicator\n    if (this.activePowerupType !== 'normal' && this.powerupDuration > 0) {\n      this.ctx.save();\n      this.ctx.shadowColor = '#FFD700';\n      this.ctx.shadowBlur = 5;\n      const remainingTime = Math.ceil(this.powerupDuration / 60);\n      this.drawText(`${this.activePowerupType.toUpperCase()}: ${remainingTime}s`, 20, this.height - 40, 14, '#FFD700');\n      this.ctx.shadowBlur = 0;\n      this.ctx.restore();\n    }\n  }\n}","size_bytes":22204},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/lib/stores/useGameStore.tsx":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type GameScreen = 'menu' | 'stage-select' | 'game';\nexport type GameState = 'playing' | 'paused' | 'ended' | 'stage-complete';\n\ninterface GameStore {\n  currentScreen: GameScreen;\n  currentStage: number;\n  gameState: GameState;\n  unlockedStages: number;\n  \n  // Actions\n  setCurrentScreen: (screen: GameScreen) => void;\n  setCurrentStage: (stage: number) => void;\n  setGameState: (state: GameState) => void;\n  unlockNextStage: () => void;\n  goToNextStage: () => void;\n  resetProgress: () => void;\n}\n\nexport const useGameStore = create<GameStore>()(\n  persist(\n    (set, get) => ({\n      currentScreen: 'menu',\n      currentStage: 1,\n      gameState: 'playing',\n      unlockedStages: 1,\n      \n      setCurrentScreen: (screen) => set({ currentScreen: screen }),\n      \n      setCurrentStage: (stage) => set({ \n        currentStage: stage,\n        gameState: 'playing'\n      }),\n      \n      setGameState: (state) => set({ gameState: state }),\n      \n      unlockNextStage: () => set((state) => ({\n        unlockedStages: Math.max(state.unlockedStages, state.currentStage + 1)\n      })),\n      \n      goToNextStage: () => {\n        const { currentStage, unlockedStages } = get();\n        if (currentStage < 5 && currentStage < unlockedStages) {\n          set({ \n            currentStage: currentStage + 1,\n            gameState: 'playing',\n            currentScreen: 'game'\n          });\n        } else {\n          set({ currentScreen: 'stage-select' });\n        }\n      },\n      \n      resetProgress: () => set({\n        unlockedStages: 1,\n        currentStage: 1,\n        gameState: 'playing',\n        currentScreen: 'menu'\n      })\n    }),\n    {\n      name: 'cultural-arcade-game-store',\n      partialize: (state) => ({\n        unlockedStages: state.unlockedStages\n      })\n    }\n  )\n);\n","size_bytes":1875},"client/src/lib/stores/useScoreStore.tsx":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface ScoreStore {\n  scores: Record<number, number>;\n  highScores: Record<number, number>;\n  \n  // Actions\n  updateScore: (stage: number, score: number) => void;\n  resetScores: () => void;\n  getHighScore: (stage: number) => number;\n}\n\nexport const useScoreStore = create<ScoreStore>()(\n  persist(\n    (set, get) => ({\n      scores: {},\n      highScores: {},\n      \n      updateScore: (stage, score) => {\n        set((state) => {\n          const newScores = { ...state.scores, [stage]: score };\n          const newHighScores = { ...state.highScores };\n          \n          if (!newHighScores[stage] || score > newHighScores[stage]) {\n            newHighScores[stage] = score;\n          }\n          \n          return {\n            scores: newScores,\n            highScores: newHighScores\n          };\n        });\n      },\n      \n      resetScores: () => set({\n        scores: {},\n        highScores: {}\n      }),\n      \n      getHighScore: (stage) => {\n        return get().highScores[stage] || 0;\n      }\n    }),\n    {\n      name: 'cultural-arcade-scores',\n      partialize: (state) => ({\n        highScores: state.highScores\n      })\n    }\n  )\n);\n","size_bytes":1232},"client/src/lib/utils/GameRenderer.ts":{"content":"export class GameRenderer {\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(ctx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n  }\n\n  drawSprite(x: number, y: number, width: number, height: number, color: string) {\n    this.ctx.save();\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x - width / 2, y - height / 2, width, height);\n    this.ctx.restore();\n  }\n\n  drawCircle(x: number, y: number, radius: number, color: string, stroke = false) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius, 0, Math.PI * 2);\n    \n    if (stroke) {\n      this.ctx.strokeStyle = color;\n      this.ctx.stroke();\n    } else {\n      this.ctx.fillStyle = color;\n      this.ctx.fill();\n    }\n    \n    this.ctx.restore();\n  }\n\n  drawText(text: string, x: number, y: number, size = 16, color = 'white', align: CanvasTextAlign = 'left') {\n    this.ctx.save();\n    this.ctx.font = `${size}px Inter, sans-serif`;\n    this.ctx.fillStyle = color;\n    this.ctx.textAlign = align;\n    this.ctx.fillText(text, x, y);\n    this.ctx.restore();\n  }\n\n  clear(width: number, height: number) {\n    this.ctx.clearRect(0, 0, width, height);\n  }\n\n  drawGradient(x: number, y: number, width: number, height: number, colors: string[]) {\n    const gradient = this.ctx.createLinearGradient(x, y, x, y + height);\n    colors.forEach((color, index) => {\n      gradient.addColorStop(index / (colors.length - 1), color);\n    });\n    \n    this.ctx.save();\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(x, y, width, height);\n    this.ctx.restore();\n  }\n}\n","size_bytes":1558},"client/src/lib/utils/InputHandler.ts":{"content":"export class InputHandler {\n  private keys: Set<string> = new Set();\n  private callbacks: Map<string, Function[]> = new Map();\n\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners() {\n    document.addEventListener('keydown', (e) => {\n      this.keys.add(e.code);\n      this.triggerCallbacks('keydown', e.code);\n    });\n\n    document.addEventListener('keyup', (e) => {\n      this.keys.delete(e.code);\n      this.triggerCallbacks('keyup', e.code);\n    });\n  }\n\n  isKeyPressed(key: string): boolean {\n    return this.keys.has(key);\n  }\n\n  onKeyDown(key: string, callback: Function) {\n    const eventKey = `keydown:${key}`;\n    if (!this.callbacks.has(eventKey)) {\n      this.callbacks.set(eventKey, []);\n    }\n    this.callbacks.get(eventKey)!.push(callback);\n  }\n\n  onKeyUp(key: string, callback: Function) {\n    const eventKey = `keyup:${key}`;\n    if (!this.callbacks.has(eventKey)) {\n      this.callbacks.set(eventKey, []);\n    }\n    this.callbacks.get(eventKey)!.push(callback);\n  }\n\n  private triggerCallbacks(event: string, key: string) {\n    const eventKey = `${event}:${key}`;\n    const callbacks = this.callbacks.get(eventKey);\n    if (callbacks) {\n      callbacks.forEach(callback => callback());\n    }\n  }\n\n  destroy() {\n    this.callbacks.clear();\n    this.keys.clear();\n  }\n}\n","size_bytes":1320},"client/src/lib/utils/ParticleSystem.ts":{"content":"interface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  size: number;\n  color: string;\n  gravity?: number;\n}\n\nexport class ParticleSystem {\n  private particles: Particle[] = [];\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(ctx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n  }\n\n  addExplosion(x: number, y: number, count = 20, color = '#FFD700') {\n    for (let i = 0; i < count; i++) {\n      const angle = (Math.PI * 2 * i) / count;\n      const speed = 2 + Math.random() * 4;\n      \n      this.particles.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        life: 60,\n        maxLife: 60,\n        size: 2 + Math.random() * 3,\n        color,\n        gravity: 0.1\n      });\n    }\n  }\n\n  addTrail(x: number, y: number, vx: number, vy: number, color = '#00FFFF') {\n    this.particles.push({\n      x,\n      y,\n      vx: vx * 0.1 + (Math.random() - 0.5) * 0.5,\n      vy: vy * 0.1 + (Math.random() - 0.5) * 0.5,\n      life: 30,\n      maxLife: 30,\n      size: 1 + Math.random() * 2,\n      color\n    });\n  }\n\n  update() {\n    this.particles = this.particles.filter(particle => {\n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      \n      // Apply gravity if specified\n      if (particle.gravity) {\n        particle.vy += particle.gravity;\n      }\n      \n      // Update life\n      particle.life--;\n      \n      return particle.life > 0;\n    });\n  }\n\n  render() {\n    this.particles.forEach(particle => {\n      const alpha = particle.life / particle.maxLife;\n      \n      this.ctx.save();\n      this.ctx.globalAlpha = alpha;\n      this.ctx.fillStyle = particle.color;\n      this.ctx.beginPath();\n      this.ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);\n      this.ctx.fill();\n      this.ctx.restore();\n    });\n  }\n\n  clear() {\n    this.particles = [];\n  }\n}\n","size_bytes":1946},"client/src/lib/utils/Physics.ts":{"content":"export interface Vector2 {\n  x: number;\n  y: number;\n}\n\nexport class PhysicsUtils {\n  static distance(a: Vector2, b: Vector2): number {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  static normalize(vector: Vector2): Vector2 {\n    const length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    if (length === 0) return { x: 0, y: 0 };\n    return { x: vector.x / length, y: vector.y / length };\n  }\n\n  static multiply(vector: Vector2, scalar: number): Vector2 {\n    return { x: vector.x * scalar, y: vector.y * scalar };\n  }\n\n  static add(a: Vector2, b: Vector2): Vector2 {\n    return { x: a.x + b.x, y: a.y + b.y };\n  }\n\n  static subtract(a: Vector2, b: Vector2): Vector2 {\n    return { x: a.x - b.x, y: a.y - b.y };\n  }\n\n  static circleCollision(pos1: Vector2, radius1: number, pos2: Vector2, radius2: number): boolean {\n    const distance = this.distance(pos1, pos2);\n    return distance < (radius1 + radius2);\n  }\n\n  static rectCollision(pos1: Vector2, size1: Vector2, pos2: Vector2, size2: Vector2): boolean {\n    return pos1.x < pos2.x + size2.x &&\n           pos1.x + size1.x > pos2.x &&\n           pos1.y < pos2.y + size2.y &&\n           pos1.y + size1.y > pos2.y;\n  }\n\n  static wrapPosition(position: Vector2, bounds: Vector2): Vector2 {\n    return {\n      x: ((position.x % bounds.x) + bounds.x) % bounds.x,\n      y: ((position.y % bounds.y) + bounds.y) % bounds.y\n    };\n  }\n\n  static clampPosition(position: Vector2, min: Vector2, max: Vector2): Vector2 {\n    return {\n      x: Math.max(min.x, Math.min(max.x, position.x)),\n      y: Math.max(min.y, Math.min(max.y, position.y))\n    };\n  }\n}\n","size_bytes":1666}}}